
geofence.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  000016f6  0000178a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  0080013e  0080013e  000017c8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000017c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001824  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00001864  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ea9  00000000  00000000  00001a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001083  00000000  00000000  000038f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ee6  00000000  00000000  00004978  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000574  00000000  00000000  00005860  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000085f  00000000  00000000  00005dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f03  00000000  00000000  00006633  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  00007536  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__ctors_end>
       4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
       8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
       c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      10:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      14:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      18:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      1c:	0c 94 31 01 	jmp	0x262	; 0x262 <__vector_7>
      20:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      24:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      28:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      2c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      30:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      34:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      38:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      3c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      40:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      44:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      48:	0c 94 89 03 	jmp	0x712	; 0x712 <__vector_18>
      4c:	0c 94 1a 04 	jmp	0x834	; 0x834 <__vector_19>
      50:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      54:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      58:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      5c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      60:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      64:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      68:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      6c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      70:	0c 94 b3 03 	jmp	0x766	; 0x766 <__vector_28>
      74:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <__vector_29>
      78:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      7c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      80:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      84:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      88:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      8c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      90:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      94:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      98:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      9c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      a0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      a4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      a8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      ac:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      b0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      b4:	05 a8       	ldd	r0, Z+53	; 0x35
      b6:	4c cd       	rjmp	.-1384   	; 0xfffffb50 <__eeprom_end+0xff7efb50>
      b8:	b2 d4       	rcall	.+2404   	; 0xa1e <distance_calculation+0x36>
      ba:	4e b9       	out	0x0e, r20	; 14
      bc:	38 36       	cpi	r19, 0x68	; 104
      be:	a9 02       	muls	r26, r25
      c0:	0c 50       	subi	r16, 0x0C	; 12
      c2:	b9 91       	ld	r27, Y+
      c4:	86 88       	ldd	r8, Z+22	; 0x16
      c6:	08 3c       	cpi	r16, 0xC8	; 200
      c8:	a6 aa       	std	Z+54, r10	; 0x36
      ca:	aa 2a       	or	r10, r26
      cc:	be 00       	.word	0x00be	; ????
      ce:	00 00       	nop
      d0:	80 3f       	cpi	r24, 0xF0	; 240

000000d2 <__trampolines_end>:
      d2:	4e 41       	sbci	r20, 0x1E	; 30
      d4:	4e 49       	Address 0x000000d4 is out of bounds.
.word	0xffff	; ????

000000d5 <pstr_inity>:
      d5:	49 4e 49 54 59                                      INITY

000000da <pstr_inf>:
      da:	49 4e 46                                            INF

000000dd <pwr_m10>:
      dd:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      ed:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000f5 <pwr_p10>:
      f5:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     105:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

0000010e <__ctors_end>:
     10e:	11 24       	eor	r1, r1
     110:	1f be       	out	0x3f, r1	; 63
     112:	cf ef       	ldi	r28, 0xFF	; 255
     114:	d8 e0       	ldi	r29, 0x08	; 8
     116:	de bf       	out	0x3e, r29	; 62
     118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_copy_data>:
     11a:	11 e0       	ldi	r17, 0x01	; 1
     11c:	a0 e0       	ldi	r26, 0x00	; 0
     11e:	b1 e0       	ldi	r27, 0x01	; 1
     120:	e6 ef       	ldi	r30, 0xF6	; 246
     122:	f6 e1       	ldi	r31, 0x16	; 22
     124:	02 c0       	rjmp	.+4      	; 0x12a <__do_copy_data+0x10>
     126:	05 90       	lpm	r0, Z+
     128:	0d 92       	st	X+, r0
     12a:	ae 33       	cpi	r26, 0x3E	; 62
     12c:	b1 07       	cpc	r27, r17
     12e:	d9 f7       	brne	.-10     	; 0x126 <__do_copy_data+0xc>

00000130 <__do_clear_bss>:
     130:	21 e0       	ldi	r18, 0x01	; 1
     132:	ae e3       	ldi	r26, 0x3E	; 62
     134:	b1 e0       	ldi	r27, 0x01	; 1
     136:	01 c0       	rjmp	.+2      	; 0x13a <.do_clear_bss_start>

00000138 <.do_clear_bss_loop>:
     138:	1d 92       	st	X+, r1

0000013a <.do_clear_bss_start>:
     13a:	ae 37       	cpi	r26, 0x7E	; 126
     13c:	b2 07       	cpc	r27, r18
     13e:	e1 f7       	brne	.-8      	; 0x138 <.do_clear_bss_loop>
     140:	0e 94 78 01 	call	0x2f0	; 0x2f0 <main>
     144:	0c 94 79 0b 	jmp	0x16f2	; 0x16f2 <_exit>

00000148 <__bad_interrupt>:
     148:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014c <TWI_init>:

#include <avr/io.h>
#include <util/delay.h>

void TWI_init(void){
	TWSR0 = 0x00; // prescaler to 1
     14c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR0 = ((F_CPU / SCL_CLOCK) - 16) / 2; // Bit rate register
     150:	88 e4       	ldi	r24, 0x48	; 72
     152:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     156:	08 95       	ret

00000158 <TWI_stop>:
}

void TWI_stop(void){
	TWCR0 = (1<<TWSTO) | (1<<TWEN) | (1<<TWINT); // Stop
     158:	84 e9       	ldi	r24, 0x94	; 148
     15a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     15e:	8f e9       	ldi	r24, 0x9F	; 159
     160:	9f e0       	ldi	r25, 0x0F	; 15
     162:	01 97       	sbiw	r24, 0x01	; 1
     164:	f1 f7       	brne	.-4      	; 0x162 <TWI_stop+0xa>
     166:	00 c0       	rjmp	.+0      	; 0x168 <TWI_stop+0x10>
     168:	00 00       	nop
     16a:	08 95       	ret

0000016c <TWI_start>:
	_delay_ms(1);
}

void TWI_start(void){
	TWCR0 = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
     16c:	84 ea       	ldi	r24, 0xA4	; 164
     16e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR0 & (1 << TWINT)));
     172:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     176:	88 23       	and	r24, r24
     178:	e4 f7       	brge	.-8      	; 0x172 <TWI_start+0x6>
}
     17a:	08 95       	ret

0000017c <TWI_write>:

void TWI_write(uint8_t data){
	TWDR0 = data;
     17c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR0 = (1<<TWEN) | (1<<TWINT);
     180:	84 e8       	ldi	r24, 0x84	; 132
     182:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR0 & (1<<TWINT)));
     186:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     18a:	88 23       	and	r24, r24
     18c:	e4 f7       	brge	.-8      	; 0x186 <TWI_write+0xa>
}
     18e:	08 95       	ret

00000190 <LCD_sendCommand>:

void LCD_sendCommand(uint8_t cmd) {
     190:	cf 93       	push	r28
     192:	c8 2f       	mov	r28, r24
	TWI_start();
     194:	0e 94 b6 00 	call	0x16c	; 0x16c <TWI_start>
	TWI_write(LCD_ADDR << 1); // Write address
     198:	8c e7       	ldi	r24, 0x7C	; 124
     19a:	0e 94 be 00 	call	0x17c	; 0x17c <TWI_write>
	TWI_write(0x80); // Co = 1, RS = 0 (Command Mode)
     19e:	80 e8       	ldi	r24, 0x80	; 128
     1a0:	0e 94 be 00 	call	0x17c	; 0x17c <TWI_write>
	TWI_write(cmd);
     1a4:	8c 2f       	mov	r24, r28
     1a6:	0e 94 be 00 	call	0x17c	; 0x17c <TWI_write>
	TWI_stop();
     1aa:	0e 94 ac 00 	call	0x158	; 0x158 <TWI_stop>
}
     1ae:	cf 91       	pop	r28
     1b0:	08 95       	ret

000001b2 <LCD_sendData>:

void LCD_sendData(uint8_t data) {
     1b2:	cf 93       	push	r28
     1b4:	c8 2f       	mov	r28, r24
	TWI_start();
     1b6:	0e 94 b6 00 	call	0x16c	; 0x16c <TWI_start>
	TWI_write(LCD_ADDR << 1); // Write address
     1ba:	8c e7       	ldi	r24, 0x7C	; 124
     1bc:	0e 94 be 00 	call	0x17c	; 0x17c <TWI_write>
	TWI_write(0x40); // Co = 0, RS = 1 (Data Mode)
     1c0:	80 e4       	ldi	r24, 0x40	; 64
     1c2:	0e 94 be 00 	call	0x17c	; 0x17c <TWI_write>
	TWI_write(data);
     1c6:	8c 2f       	mov	r24, r28
     1c8:	0e 94 be 00 	call	0x17c	; 0x17c <TWI_write>
	TWI_stop();
     1cc:	0e 94 ac 00 	call	0x158	; 0x158 <TWI_stop>
}
     1d0:	cf 91       	pop	r28
     1d2:	08 95       	ret

000001d4 <LCD_init>:
     1d4:	2f ef       	ldi	r18, 0xFF	; 255
     1d6:	80 e7       	ldi	r24, 0x70	; 112
     1d8:	92 e0       	ldi	r25, 0x02	; 2
     1da:	21 50       	subi	r18, 0x01	; 1
     1dc:	80 40       	sbci	r24, 0x00	; 0
     1de:	90 40       	sbci	r25, 0x00	; 0
     1e0:	e1 f7       	brne	.-8      	; 0x1da <LCD_init+0x6>
     1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <LCD_init+0x10>
     1e4:	00 00       	nop

void LCD_init(void) {
	_delay_ms(50); // Wait for LCD power-up
	LCD_sendCommand(0x38); // 8-bit, 2-line, normal font
     1e6:	88 e3       	ldi	r24, 0x38	; 56
     1e8:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_sendCommand>
	LCD_sendCommand(0x39); // Function set
     1ec:	89 e3       	ldi	r24, 0x39	; 57
     1ee:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_sendCommand>
	LCD_sendCommand(0x14); // Internal OSC frequency
     1f2:	84 e1       	ldi	r24, 0x14	; 20
     1f4:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_sendCommand>
	LCD_sendCommand(0x70); // Contrast set
     1f8:	80 e7       	ldi	r24, 0x70	; 112
     1fa:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_sendCommand>
	LCD_sendCommand(0x56); // Power/icon/contrast control
     1fe:	86 e5       	ldi	r24, 0x56	; 86
     200:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_sendCommand>
	LCD_sendCommand(0x6C); // Follower control
     204:	8c e6       	ldi	r24, 0x6C	; 108
     206:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_sendCommand>
     20a:	2f ef       	ldi	r18, 0xFF	; 255
     20c:	83 ec       	ldi	r24, 0xC3	; 195
     20e:	99 e0       	ldi	r25, 0x09	; 9
     210:	21 50       	subi	r18, 0x01	; 1
     212:	80 40       	sbci	r24, 0x00	; 0
     214:	90 40       	sbci	r25, 0x00	; 0
     216:	e1 f7       	brne	.-8      	; 0x210 <LCD_init+0x3c>
     218:	00 c0       	rjmp	.+0      	; 0x21a <LCD_init+0x46>
     21a:	00 00       	nop
	_delay_ms(200);
	LCD_sendCommand(0x38); // Function set
     21c:	88 e3       	ldi	r24, 0x38	; 56
     21e:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_sendCommand>
	LCD_sendCommand(0x0C); // Display ON
     222:	8c e0       	ldi	r24, 0x0C	; 12
     224:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_sendCommand>
	LCD_sendCommand(0x01); // Clear display
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_sendCommand>
     22e:	8f e3       	ldi	r24, 0x3F	; 63
     230:	9f e1       	ldi	r25, 0x1F	; 31
     232:	01 97       	sbiw	r24, 0x01	; 1
     234:	f1 f7       	brne	.-4      	; 0x232 <LCD_init+0x5e>
     236:	00 c0       	rjmp	.+0      	; 0x238 <LCD_init+0x64>
     238:	00 00       	nop
     23a:	08 95       	ret

0000023c <LCD_setCursor>:
	_delay_ms(2);
}

void LCD_setCursor(uint8_t col, uint8_t row) {
	uint8_t address = (row == 0) ? col : (0x40 + col);
     23c:	61 11       	cpse	r22, r1
     23e:	80 5c       	subi	r24, 0xC0	; 192
	LCD_sendCommand(0x80 | address);
     240:	80 68       	ori	r24, 0x80	; 128
     242:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_sendCommand>
     246:	08 95       	ret

00000248 <LCD_print>:
}

void LCD_print(const char *str) {
     248:	cf 93       	push	r28
     24a:	df 93       	push	r29
     24c:	ec 01       	movw	r28, r24
	while (*str) {
     24e:	03 c0       	rjmp	.+6      	; 0x256 <LCD_print+0xe>
		LCD_sendData(*str++);
     250:	21 96       	adiw	r28, 0x01	; 1
     252:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_sendData>
	uint8_t address = (row == 0) ? col : (0x40 + col);
	LCD_sendCommand(0x80 | address);
}

void LCD_print(const char *str) {
	while (*str) {
     256:	88 81       	ld	r24, Y
     258:	81 11       	cpse	r24, r1
     25a:	fa cf       	rjmp	.-12     	; 0x250 <LCD_print+0x8>
		LCD_sendData(*str++);
	}
}
     25c:	df 91       	pop	r29
     25e:	cf 91       	pop	r28
     260:	08 95       	ret

00000262 <__vector_7>:
	OCR2A = 255;
	TIMSK2 |= (1<<OCIE2A);
}
	volatile tick_count = 0;

ISR(TIMER2_COMPA_vect){
     262:	1f 92       	push	r1
     264:	0f 92       	push	r0
     266:	0f b6       	in	r0, 0x3f	; 63
     268:	0f 92       	push	r0
     26a:	11 24       	eor	r1, r1
     26c:	8f 93       	push	r24
     26e:	9f 93       	push	r25
	if (tick_count > 64){
     270:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     274:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <__data_end+0x1>
     278:	81 34       	cpi	r24, 0x41	; 65
     27a:	91 05       	cpc	r25, r1
     27c:	94 f1       	brlt	.+100    	; 0x2e2 <__vector_7+0x80>
		tick_count = 0;
     27e:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <__data_end+0x1>
     282:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
		if (geofence_violation){
     286:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <geofence_violation>
     28a:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <geofence_violation+0x1>
     28e:	89 2b       	or	r24, r25
     290:	f1 f0       	breq	.+60     	; 0x2ce <__vector_7+0x6c>
		if (led_toggle_flag == 0)
     292:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <led_toggle_flag>
     296:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <led_toggle_flag+0x1>
     29a:	89 2b       	or	r24, r25
     29c:	69 f4       	brne	.+26     	; 0x2b8 <__vector_7+0x56>
		{
		
		PORTD |=(1<<PORTD4);
     29e:	8b b1       	in	r24, 0x0b	; 11
     2a0:	80 61       	ori	r24, 0x10	; 16
     2a2:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<PORTD5);
     2a4:	8b b1       	in	r24, 0x0b	; 11
     2a6:	8f 7d       	andi	r24, 0xDF	; 223
     2a8:	8b b9       	out	0x0b, r24	; 11
		led_toggle_flag = 1;
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <led_toggle_flag+0x1>
     2b2:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <led_toggle_flag>
     2b6:	15 c0       	rjmp	.+42     	; 0x2e2 <__vector_7+0x80>
		} else {
		
		PORTD &= ~(1<<PORTD4);
     2b8:	8b b1       	in	r24, 0x0b	; 11
     2ba:	8f 7e       	andi	r24, 0xEF	; 239
     2bc:	8b b9       	out	0x0b, r24	; 11
		PORTD |= (1<<PORTD5);
     2be:	8b b1       	in	r24, 0x0b	; 11
     2c0:	80 62       	ori	r24, 0x20	; 32
     2c2:	8b b9       	out	0x0b, r24	; 11
		led_toggle_flag = 0;
     2c4:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <led_toggle_flag+0x1>
     2c8:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <led_toggle_flag>
     2cc:	0a c0       	rjmp	.+20     	; 0x2e2 <__vector_7+0x80>
		}
	} else {
		PORTD &= ~(1<<PORTD4);
     2ce:	8b b1       	in	r24, 0x0b	; 11
     2d0:	8f 7e       	andi	r24, 0xEF	; 239
     2d2:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<PORTD5);
     2d4:	8b b1       	in	r24, 0x0b	; 11
     2d6:	8f 7d       	andi	r24, 0xDF	; 223
     2d8:	8b b9       	out	0x0b, r24	; 11
		led_toggle_flag =0;
     2da:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <led_toggle_flag+0x1>
     2de:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <led_toggle_flag>
		}
	}
}
     2e2:	9f 91       	pop	r25
     2e4:	8f 91       	pop	r24
     2e6:	0f 90       	pop	r0
     2e8:	0f be       	out	0x3f, r0	; 63
     2ea:	0f 90       	pop	r0
     2ec:	1f 90       	pop	r1
     2ee:	18 95       	reti

000002f0 <main>:

int main(void){
     2f0:	cf 93       	push	r28
     2f2:	df 93       	push	r29
     2f4:	cd b7       	in	r28, 0x3d	; 61
     2f6:	de b7       	in	r29, 0x3e	; 62
     2f8:	ca 57       	subi	r28, 0x7A	; 122
     2fa:	d1 09       	sbc	r29, r1
     2fc:	0f b6       	in	r0, 0x3f	; 63
     2fe:	f8 94       	cli
     300:	de bf       	out	0x3e, r29	; 62
     302:	0f be       	out	0x3f, r0	; 63
     304:	cd bf       	out	0x3d, r28	; 61
	// LCD!!
	
	TWI_init();
     306:	0e 94 a6 00 	call	0x14c	; 0x14c <TWI_init>
	LCD_init();
     30a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_init>
	
// ^LCD!
	
	ADCint(); // read potentiometer
     30e:	0e 94 8a 04 	call	0x914	; 0x914 <ADCint>
	LEdint(); //set ledpins
     312:	0e 94 c3 04 	call	0x986	; 0x986 <LEdint>

	PWMint(); //buzzer with pwm
     316:	0e 94 c7 04 	call	0x98e	; 0x98e <PWMint>
	buttoninit();
     31a:	0e 94 8d 05 	call	0xb1a	; 0xb1a <buttoninit>
	initUART0(UBRR); //initializing the uarts
     31e:	87 e6       	ldi	r24, 0x67	; 103
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <initUART0>
	initUART1(UBRR);
     326:	87 e6       	ldi	r24, 0x67	; 103
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	0e 94 cd 02 	call	0x59a	; 0x59a <initUART1>
	volatile float home_lat = 0.0;
     32e:	19 82       	std	Y+1, r1	; 0x01
     330:	1a 82       	std	Y+2, r1	; 0x02
     332:	1b 82       	std	Y+3, r1	; 0x03
     334:	1c 82       	std	Y+4, r1	; 0x04
	volatile float home_lon = 0.0;
     336:	1d 82       	std	Y+5, r1	; 0x05
     338:	1e 82       	std	Y+6, r1	; 0x06
     33a:	1f 82       	std	Y+7, r1	; 0x07
     33c:	18 86       	std	Y+8, r1	; 0x08

	sei();
     33e:	78 94       	sei

	uint8_t home_set =0;

	enableUART1Tx();
     340:	0e 94 77 03 	call	0x6ee	; 0x6ee <enableUART1Tx>

	for(unsigned char i = 0; i < 10; i++){
     344:	10 e0       	ldi	r17, 0x00	; 0
     346:	1d c0       	rjmp	.+58     	; 0x382 <main+0x92>
		char pmtk_cmd[] = "$PMTK314,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n";
     348:	84 e3       	ldi	r24, 0x34	; 52
     34a:	ea e0       	ldi	r30, 0x0A	; 10
     34c:	f1 e0       	ldi	r31, 0x01	; 1
     34e:	de 01       	movw	r26, r28
     350:	98 96       	adiw	r26, 0x28	; 40
     352:	01 90       	ld	r0, Z+
     354:	0d 92       	st	X+, r0
     356:	8a 95       	dec	r24
     358:	e1 f7       	brne	.-8      	; 0x352 <main+0x62>
     35a:	2f ef       	ldi	r18, 0xFF	; 255
     35c:	81 ee       	ldi	r24, 0xE1	; 225
     35e:	94 e0       	ldi	r25, 0x04	; 4
     360:	21 50       	subi	r18, 0x01	; 1
     362:	80 40       	sbci	r24, 0x00	; 0
     364:	90 40       	sbci	r25, 0x00	; 0
     366:	e1 f7       	brne	.-8      	; 0x360 <main+0x70>
     368:	00 c0       	rjmp	.+0      	; 0x36a <main+0x7a>
     36a:	00 00       	nop
		_delay_ms(100);
		writeUART(getUART1TxBuffer(), pmtk_cmd,51);
     36c:	0e 94 c8 02 	call	0x590	; 0x590 <getUART1TxBuffer>
     370:	43 e3       	ldi	r20, 0x33	; 51
     372:	be 01       	movw	r22, r28
     374:	68 5d       	subi	r22, 0xD8	; 216
     376:	7f 4f       	sbci	r23, 0xFF	; 255
     378:	0e 94 49 03 	call	0x692	; 0x692 <writeUART>
		enableUART1Tx();
     37c:	0e 94 77 03 	call	0x6ee	; 0x6ee <enableUART1Tx>

	uint8_t home_set =0;

	enableUART1Tx();

	for(unsigned char i = 0; i < 10; i++){
     380:	1f 5f       	subi	r17, 0xFF	; 255
     382:	1a 30       	cpi	r17, 0x0A	; 10
     384:	08 f3       	brcs	.-62     	; 0x348 <main+0x58>
     386:	71 2c       	mov	r7, r1


	posdata location;
	while (1) 
	{
		location = parseNMEA(getUART1RxBuffer());
     388:	0e 94 be 02 	call	0x57c	; 0x57c <getUART1RxBuffer>
     38c:	bc 01       	movw	r22, r24
     38e:	ce 01       	movw	r24, r28
     390:	84 5a       	subi	r24, 0xA4	; 164
     392:	9f 4f       	sbci	r25, 0xFF	; 255
     394:	0e 94 67 02 	call	0x4ce	; 0x4ce <parseNMEA>
     398:	8f e1       	ldi	r24, 0x1F	; 31
     39a:	fe 01       	movw	r30, r28
     39c:	e4 5a       	subi	r30, 0xA4	; 164
     39e:	ff 4f       	sbci	r31, 0xFF	; 255
     3a0:	de 01       	movw	r26, r28
     3a2:	19 96       	adiw	r26, 0x09	; 9
     3a4:	01 90       	ld	r0, Z+
     3a6:	0d 92       	st	X+, r0
     3a8:	8a 95       	dec	r24
     3aa:	e1 f7       	brne	.-8      	; 0x3a4 <main+0xb4>

		writeUART(getUART0TxBuffer(), getUART1RxBuffer(), 82);
     3ac:	0e 94 be 02 	call	0x57c	; 0x57c <getUART1RxBuffer>
     3b0:	8c 01       	movw	r16, r24
     3b2:	0e 94 c3 02 	call	0x586	; 0x586 <getUART0TxBuffer>
     3b6:	42 e5       	ldi	r20, 0x52	; 82
     3b8:	b8 01       	movw	r22, r16
     3ba:	0e 94 49 03 	call	0x692	; 0x692 <writeUART>
		enableUART0Tx();
     3be:	0e 94 65 03 	call	0x6ca	; 0x6ca <enableUART0Tx>

		LCD_setCursor(0, 0);
     3c2:	60 e0       	ldi	r22, 0x00	; 0
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_setCursor>
		LCD_print(location.lats);
     3ca:	ce 01       	movw	r24, r28
     3cc:	0d 96       	adiw	r24, 0x0d	; 13
     3ce:	0e 94 24 01 	call	0x248	; 0x248 <LCD_print>
		LCD_setCursor(0, 1);
     3d2:	61 e0       	ldi	r22, 0x01	; 1
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_setCursor>
		LCD_print(location.lons);
     3da:	ce 01       	movw	r24, r28
     3dc:	4a 96       	adiw	r24, 0x1a	; 26
     3de:	0e 94 24 01 	call	0x248	; 0x248 <LCD_print>

		if(button_pressed() && !home_set){
     3e2:	0e 94 94 05 	call	0xb28	; 0xb28 <button_pressed>
     3e6:	88 23       	and	r24, r24
     3e8:	09 f1       	breq	.+66     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
     3ea:	71 10       	cpse	r7, r1
     3ec:	1f c0       	rjmp	.+62     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
			LCD_setCursor(13, 1);
     3ee:	61 e0       	ldi	r22, 0x01	; 1
     3f0:	8d e0       	ldi	r24, 0x0D	; 13
     3f2:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_setCursor>
			LCD_print("set");
     3f6:	86 e0       	ldi	r24, 0x06	; 6
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	0e 94 24 01 	call	0x248	; 0x248 <LCD_print>

			uint16_t radius = geofence_radius();
     3fe:	0e 94 9f 04 	call	0x93e	; 0x93e <geofence_radius>
     402:	8c 01       	movw	r16, r24

			home_lat = location.lat;
     404:	69 85       	ldd	r22, Y+9	; 0x09
     406:	7a 85       	ldd	r23, Y+10	; 0x0a
     408:	8b 85       	ldd	r24, Y+11	; 0x0b
     40a:	9c 85       	ldd	r25, Y+12	; 0x0c
     40c:	69 83       	std	Y+1, r22	; 0x01
     40e:	7a 83       	std	Y+2, r23	; 0x02
     410:	8b 83       	std	Y+3, r24	; 0x03
     412:	9c 83       	std	Y+4, r25	; 0x04
			home_lon = location.lon;
     414:	2e 89       	ldd	r18, Y+22	; 0x16
     416:	3f 89       	ldd	r19, Y+23	; 0x17
     418:	48 8d       	ldd	r20, Y+24	; 0x18
     41a:	59 8d       	ldd	r21, Y+25	; 0x19
     41c:	2d 83       	std	Y+5, r18	; 0x05
     41e:	3e 83       	std	Y+6, r19	; 0x06
     420:	4f 83       	std	Y+7, r20	; 0x07
     422:	58 87       	std	Y+8, r21	; 0x08

			area_save(location.lat,location.lon , radius);
     424:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <area_save>
			home_set = 1;
     428:	77 24       	eor	r7, r7
     42a:	73 94       	inc	r7
		}

		uint16_t radius = geofence_radius();
     42c:	0e 94 9f 04 	call	0x93e	; 0x93e <geofence_radius>
     430:	4c 01       	movw	r8, r24
		uint16_t distance = distance_calculation(home_lat, home_lon, location.lat, location.lon); 
     432:	2d 81       	ldd	r18, Y+5	; 0x05
     434:	3e 81       	ldd	r19, Y+6	; 0x06
     436:	4f 81       	ldd	r20, Y+7	; 0x07
     438:	58 85       	ldd	r21, Y+8	; 0x08
     43a:	69 81       	ldd	r22, Y+1	; 0x01
     43c:	7a 81       	ldd	r23, Y+2	; 0x02
     43e:	8b 81       	ldd	r24, Y+3	; 0x03
     440:	9c 81       	ldd	r25, Y+4	; 0x04
     442:	ae 88       	ldd	r10, Y+22	; 0x16
     444:	bf 88       	ldd	r11, Y+23	; 0x17
     446:	c8 8c       	ldd	r12, Y+24	; 0x18
     448:	d9 8c       	ldd	r13, Y+25	; 0x19
     44a:	e9 84       	ldd	r14, Y+9	; 0x09
     44c:	fa 84       	ldd	r15, Y+10	; 0x0a
     44e:	0b 85       	ldd	r16, Y+11	; 0x0b
     450:	1c 85       	ldd	r17, Y+12	; 0x0c
     452:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <distance_calculation>
     456:	0e 94 21 06 	call	0xc42	; 0xc42 <__fixunssfsi>

		if (distance > radius){
     45a:	86 16       	cp	r8, r22
     45c:	97 06       	cpc	r9, r23
     45e:	48 f4       	brcc	.+18     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
			geofence_violation = 1;
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <geofence_violation+0x1>
     468:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <geofence_violation>
			buzzeron();
     46c:	0e 94 cf 04 	call	0x99e	; 0x99e <buzzeron>
     470:	8b cf       	rjmp	.-234    	; 0x388 <main+0x98>
		} else{
			geofence_violation = 0;
     472:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <geofence_violation+0x1>
     476:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <geofence_violation>
			buzzeroff(); //buzzer off
     47a:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <buzzeroff>
     47e:	84 cf       	rjmp	.-248    	; 0x388 <main+0x98>

00000480 <tokenize>:
#include <stdlib.h>
#include "nmea.h"

char *tokenPtrs[15];
void tokenize(char *input, char *tokenPtrs[], unsigned char maxTokens){
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	dc 01       	movw	r26, r24
     486:	eb 01       	movw	r28, r22
	unsigned char tokens = 0;
	tokenPtrs[tokens++] = input;
     488:	99 83       	std	Y+1, r25	; 0x01
     48a:	88 83       	st	Y, r24
	for(unsigned char i = 0; tokens < maxTokens && input[i] != '*'; i++){
     48c:	90 e0       	ldi	r25, 0x00	; 0
#include "nmea.h"

char *tokenPtrs[15];
void tokenize(char *input, char *tokenPtrs[], unsigned char maxTokens){
	unsigned char tokens = 0;
	tokenPtrs[tokens++] = input;
     48e:	71 e0       	ldi	r23, 0x01	; 1
	for(unsigned char i = 0; tokens < maxTokens && input[i] != '*'; i++){
     490:	11 c0       	rjmp	.+34     	; 0x4b4 <tokenize+0x34>
		if(input[i] == ','){
     492:	5c 32       	cpi	r21, 0x2C	; 44
     494:	71 f4       	brne	.+28     	; 0x4b2 <tokenize+0x32>
			input[i] = '\0';
     496:	10 82       	st	Z, r1
			tokenPtrs[tokens++] = &input[i + 1];
     498:	e7 2f       	mov	r30, r23
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	ee 0f       	add	r30, r30
     49e:	ff 1f       	adc	r31, r31
     4a0:	ec 0f       	add	r30, r28
     4a2:	fd 1f       	adc	r31, r29
     4a4:	2f 5f       	subi	r18, 0xFF	; 255
     4a6:	3f 4f       	sbci	r19, 0xFF	; 255
     4a8:	2a 0f       	add	r18, r26
     4aa:	3b 1f       	adc	r19, r27
     4ac:	31 83       	std	Z+1, r19	; 0x01
     4ae:	20 83       	st	Z, r18
     4b0:	7f 5f       	subi	r23, 0xFF	; 255

char *tokenPtrs[15];
void tokenize(char *input, char *tokenPtrs[], unsigned char maxTokens){
	unsigned char tokens = 0;
	tokenPtrs[tokens++] = input;
	for(unsigned char i = 0; tokens < maxTokens && input[i] != '*'; i++){
     4b2:	9f 5f       	subi	r25, 0xFF	; 255
     4b4:	74 17       	cp	r23, r20
     4b6:	40 f4       	brcc	.+16     	; 0x4c8 <tokenize+0x48>
     4b8:	29 2f       	mov	r18, r25
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	fd 01       	movw	r30, r26
     4be:	e2 0f       	add	r30, r18
     4c0:	f3 1f       	adc	r31, r19
     4c2:	50 81       	ld	r21, Z
     4c4:	5a 32       	cpi	r21, 0x2A	; 42
     4c6:	29 f7       	brne	.-54     	; 0x492 <tokenize+0x12>
		if(input[i] == ','){
			input[i] = '\0';
			tokenPtrs[tokens++] = &input[i + 1];
		}
	}
}
     4c8:	df 91       	pop	r29
     4ca:	cf 91       	pop	r28
     4cc:	08 95       	ret

000004ce <parseNMEA>:

posdata parseNMEA(char *input) {
     4ce:	0f 93       	push	r16
     4d0:	1f 93       	push	r17
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
     4d6:	ec 01       	movw	r28, r24
     4d8:	cb 01       	movw	r24, r22
	tokenize(input, tokenPtrs, 15);
     4da:	4f e0       	ldi	r20, 0x0F	; 15
     4dc:	6a e5       	ldi	r22, 0x5A	; 90
     4de:	71 e0       	ldi	r23, 0x01	; 1
     4e0:	0e 94 40 02 	call	0x480	; 0x480 <tokenize>
	posdata output;
	output.lat = atof(tokenPtrs[2]);
     4e4:	0a e5       	ldi	r16, 0x5A	; 90
     4e6:	11 e0       	ldi	r17, 0x01	; 1
     4e8:	f8 01       	movw	r30, r16
     4ea:	84 81       	ldd	r24, Z+4	; 0x04
     4ec:	95 81       	ldd	r25, Z+5	; 0x05
     4ee:	0e 94 87 09 	call	0x130e	; 0x130e <atof>
     4f2:	68 83       	st	Y, r22
     4f4:	79 83       	std	Y+1, r23	; 0x01
     4f6:	8a 83       	std	Y+2, r24	; 0x02
     4f8:	9b 83       	std	Y+3, r25	; 0x03
	output.lon = atof(tokenPtrs[4]);
     4fa:	f8 01       	movw	r30, r16
     4fc:	80 85       	ldd	r24, Z+8	; 0x08
     4fe:	91 85       	ldd	r25, Z+9	; 0x09
     500:	0e 94 87 09 	call	0x130e	; 0x130e <atof>
     504:	6d 87       	std	Y+13, r22	; 0x0d
     506:	7e 87       	std	Y+14, r23	; 0x0e
     508:	8f 87       	std	Y+15, r24	; 0x0f
     50a:	98 8b       	std	Y+16, r25	; 0x10
	output.fix = atoi(tokenPtrs[6]);
     50c:	f8 01       	movw	r30, r16
     50e:	84 85       	ldd	r24, Z+12	; 0x0c
     510:	95 85       	ldd	r25, Z+13	; 0x0d
     512:	0e 94 8b 09 	call	0x1316	; 0x1316 <atoi>
     516:	9c 8f       	std	Y+28, r25	; 0x1c
     518:	8b 8f       	std	Y+27, r24	; 0x1b
	output.satellites = atoi(tokenPtrs[7]);
     51a:	f8 01       	movw	r30, r16
     51c:	86 85       	ldd	r24, Z+14	; 0x0e
     51e:	97 85       	ldd	r25, Z+15	; 0x0f
     520:	0e 94 8b 09 	call	0x1316	; 0x1316 <atoi>
     524:	9e 8f       	std	Y+30, r25	; 0x1e
     526:	8d 8f       	std	Y+29, r24	; 0x1d
	for(unsigned char i = 0; i < 9; i++){
     528:	20 e0       	ldi	r18, 0x00	; 0
     52a:	0e c0       	rjmp	.+28     	; 0x548 <parseNMEA+0x7a>
		output.lats[i] = tokenPtrs[2][i];
     52c:	82 2f       	mov	r24, r18
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <tokenPtrs+0x4>
     534:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <tokenPtrs+0x5>
     538:	e8 0f       	add	r30, r24
     53a:	f9 1f       	adc	r31, r25
     53c:	30 81       	ld	r19, Z
     53e:	fe 01       	movw	r30, r28
     540:	e8 0f       	add	r30, r24
     542:	f9 1f       	adc	r31, r25
     544:	34 83       	std	Z+4, r19	; 0x04
	posdata output;
	output.lat = atof(tokenPtrs[2]);
	output.lon = atof(tokenPtrs[4]);
	output.fix = atoi(tokenPtrs[6]);
	output.satellites = atoi(tokenPtrs[7]);
	for(unsigned char i = 0; i < 9; i++){
     546:	2f 5f       	subi	r18, 0xFF	; 255
     548:	29 30       	cpi	r18, 0x09	; 9
     54a:	80 f3       	brcs	.-32     	; 0x52c <parseNMEA+0x5e>
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	0e c0       	rjmp	.+28     	; 0x56c <parseNMEA+0x9e>
		output.lats[i] = tokenPtrs[2][i];
	}
	for(unsigned char i = 0; i < 10; i++){
		output.lons[i] = tokenPtrs[4][i];
     550:	82 2f       	mov	r24, r18
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <tokenPtrs+0x8>
     558:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <tokenPtrs+0x9>
     55c:	e8 0f       	add	r30, r24
     55e:	f9 1f       	adc	r31, r25
     560:	30 81       	ld	r19, Z
     562:	fe 01       	movw	r30, r28
     564:	e8 0f       	add	r30, r24
     566:	f9 1f       	adc	r31, r25
     568:	31 8b       	std	Z+17, r19	; 0x11
	output.fix = atoi(tokenPtrs[6]);
	output.satellites = atoi(tokenPtrs[7]);
	for(unsigned char i = 0; i < 9; i++){
		output.lats[i] = tokenPtrs[2][i];
	}
	for(unsigned char i = 0; i < 10; i++){
     56a:	2f 5f       	subi	r18, 0xFF	; 255
     56c:	2a 30       	cpi	r18, 0x0A	; 10
     56e:	80 f3       	brcs	.-32     	; 0x550 <parseNMEA+0x82>
		output.lons[i] = tokenPtrs[4][i];
	}
	return output;
}
     570:	ce 01       	movw	r24, r28
     572:	df 91       	pop	r29
     574:	cf 91       	pop	r28
     576:	1f 91       	pop	r17
     578:	0f 91       	pop	r16
     57a:	08 95       	ret

0000057c <getUART1RxBuffer>:
	return UART0RxBuffer;
}

char* getUART1RxBuffer(){
	return UART1RxOutput;
}
     57c:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <UART1RxOutput>
     580:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <UART1RxOutput+0x1>
     584:	08 95       	ret

00000586 <getUART0TxBuffer>:

buffer* getUART0TxBuffer(){
	return UART0TxBuffer;
}
     586:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <UART0TxBuffer>
     58a:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <UART0TxBuffer+0x1>
     58e:	08 95       	ret

00000590 <getUART1TxBuffer>:

buffer* getUART1TxBuffer(){
	return UART1TxBuffer;
}
     590:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <UART1TxBuffer>
     594:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <UART1TxBuffer+0x1>
     598:	08 95       	ret

0000059a <initUART1>:

void initUART1(unsigned short ubrr){	//setup for uart receiving from gps
	UBRR1H = (unsigned char)(ubrr>>8);	//set the higher UBRR
     59a:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
	UBRR1L = (unsigned char) ubrr;		//set the lower UBRR
     59e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>
	UCSR1B = (1<<TXEN1)|(1<<RXEN1)|(1<<RXCIE1);	//enable transmit, receive and receive interrupt
     5a2:	88 e9       	ldi	r24, 0x98	; 152
     5a4:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f80c9>
	UCSR1C = (1<<UCSZ10)|(1<<UCSZ11);	//set message to 8 bits
     5a8:	86 e0       	ldi	r24, 0x06	; 6
     5aa:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f80ca>
	UART1RxBuffer = malloc(sizeof(char)*NMEALENGTH); 
     5ae:	82 e5       	ldi	r24, 0x52	; 82
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	0e 94 66 08 	call	0x10cc	; 0x10cc <malloc>
     5b6:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <UART1RxBuffer+0x1>
     5ba:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <UART1RxBuffer>
	UART1RxOutput = malloc(sizeof(char)*NMEALENGTH); 
     5be:	82 e5       	ldi	r24, 0x52	; 82
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	0e 94 66 08 	call	0x10cc	; 0x10cc <malloc>
     5c6:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <UART1RxOutput+0x1>
     5ca:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <UART1RxOutput>
	UART1TxBuffer = malloc(sizeof(buffer)); 
     5ce:	82 e8       	ldi	r24, 0x82	; 130
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	0e 94 66 08 	call	0x10cc	; 0x10cc <malloc>
     5d6:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <UART1TxBuffer+0x1>
     5da:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <UART1TxBuffer>
     5de:	08 95       	ret

000005e0 <initUART0>:
}

void initUART0(unsigned short ubrr){	//setup for usb serial to pc
	UBRR0H = (unsigned char)(ubrr>>8);	//set the higher UBRR
     5e0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char) ubrr;		//set the lower UBRR
     5e4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1<<TXEN0)|(1<<RXEN0);			//enable transmit
     5e8:	88 e1       	ldi	r24, 0x18	; 24
     5ea:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1<<UCSZ00)|(1<<UCSZ01);	//set message to 8 bits
     5ee:	86 e0       	ldi	r24, 0x06	; 6
     5f0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UART0RxBuffer = malloc(sizeof(buffer)); 
     5f4:	82 e8       	ldi	r24, 0x82	; 130
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	0e 94 66 08 	call	0x10cc	; 0x10cc <malloc>
     5fc:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <UART0RxBuffer+0x1>
     600:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <UART0RxBuffer>
	UART0TxBuffer = malloc(sizeof(buffer)); 
     604:	82 e8       	ldi	r24, 0x82	; 130
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	0e 94 66 08 	call	0x10cc	; 0x10cc <malloc>
     60c:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <UART0TxBuffer+0x1>
     610:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <UART0TxBuffer>
     614:	08 95       	ret

00000616 <writeBuffer>:
}

void writeBuffer(buffer *wbuffer, char input){
	if(wbuffer == NULL){ //check for nullptr
     616:	00 97       	sbiw	r24, 0x00	; 0
     618:	09 f1       	breq	.+66     	; 0x65c <writeBuffer+0x46>
		return;
	}
	if(((wbuffer->head + 1) == (BUFFERSIZE - 1)) & wbuffer->tail){ //if the buffer is full it becomes empty (very philosophical)
     61a:	fc 01       	movw	r30, r24
     61c:	e0 58       	subi	r30, 0x80	; 128
     61e:	ff 4f       	sbci	r31, 0xFF	; 255
     620:	20 81       	ld	r18, Z
     622:	41 e0       	ldi	r20, 0x01	; 1
     624:	50 e0       	ldi	r21, 0x00	; 0
     626:	2e 37       	cpi	r18, 0x7E	; 126
     628:	11 f0       	breq	.+4      	; 0x62e <writeBuffer+0x18>
     62a:	40 e0       	ldi	r20, 0x00	; 0
     62c:	50 e0       	ldi	r21, 0x00	; 0
     62e:	fc 01       	movw	r30, r24
     630:	ef 57       	subi	r30, 0x7F	; 127
     632:	ff 4f       	sbci	r31, 0xFF	; 255
     634:	e0 81       	ld	r30, Z
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	4e 23       	and	r20, r30
     63a:	5f 23       	and	r21, r31
     63c:	45 2b       	or	r20, r21
     63e:	21 f0       	breq	.+8      	; 0x648 <writeBuffer+0x32>
		wbuffer->tail = wbuffer->head; //this is done because otherwise when it would be read the old message would be cut off and mangled :(
     640:	fc 01       	movw	r30, r24
     642:	ef 57       	subi	r30, 0x7F	; 127
     644:	ff 4f       	sbci	r31, 0xFF	; 255
     646:	20 83       	st	Z, r18
	}
	wbuffer->data[wbuffer->head] = input; //write to buffer and move the head	
     648:	fc 01       	movw	r30, r24
     64a:	e2 0f       	add	r30, r18
     64c:	f1 1d       	adc	r31, r1
     64e:	60 83       	st	Z, r22
	wbuffer->head = (wbuffer->head + 1) & (BUFFERSIZE - 1);
     650:	fc 01       	movw	r30, r24
     652:	e0 58       	subi	r30, 0x80	; 128
     654:	ff 4f       	sbci	r31, 0xFF	; 255
     656:	2f 5f       	subi	r18, 0xFF	; 255
     658:	2f 77       	andi	r18, 0x7F	; 127
     65a:	20 83       	st	Z, r18
     65c:	08 95       	ret

0000065e <readBuffer>:
	return;
}

char readBuffer(buffer *rbuffer){
	if((rbuffer == NULL)||(rbuffer->tail == rbuffer->head)){ //check for nullptr and empty buffer
     65e:	00 97       	sbiw	r24, 0x00	; 0
     660:	a1 f0       	breq	.+40     	; 0x68a <readBuffer+0x2c>
     662:	fc 01       	movw	r30, r24
     664:	ef 57       	subi	r30, 0x7F	; 127
     666:	ff 4f       	sbci	r31, 0xFF	; 255
     668:	20 81       	ld	r18, Z
     66a:	31 97       	sbiw	r30, 0x01	; 1
     66c:	30 81       	ld	r19, Z
     66e:	23 17       	cp	r18, r19
     670:	71 f0       	breq	.+28     	; 0x68e <readBuffer+0x30>
		return 0xFF; //return 0xFF if bad 	
	}
	char output = rbuffer->data[rbuffer->tail];
     672:	fc 01       	movw	r30, r24
     674:	e2 0f       	add	r30, r18
     676:	f1 1d       	adc	r31, r1
     678:	30 81       	ld	r19, Z
	rbuffer->tail = (rbuffer->tail + 1) & (BUFFERSIZE - 1);
     67a:	fc 01       	movw	r30, r24
     67c:	ef 57       	subi	r30, 0x7F	; 127
     67e:	ff 4f       	sbci	r31, 0xFF	; 255
     680:	2f 5f       	subi	r18, 0xFF	; 255
     682:	2f 77       	andi	r18, 0x7F	; 127
     684:	20 83       	st	Z, r18
	return output;
     686:	83 2f       	mov	r24, r19
     688:	08 95       	ret
	return;
}

char readBuffer(buffer *rbuffer){
	if((rbuffer == NULL)||(rbuffer->tail == rbuffer->head)){ //check for nullptr and empty buffer
		return 0xFF; //return 0xFF if bad 	
     68a:	8f ef       	ldi	r24, 0xFF	; 255
     68c:	08 95       	ret
     68e:	8f ef       	ldi	r24, 0xFF	; 255
	}
	char output = rbuffer->data[rbuffer->tail];
	rbuffer->tail = (rbuffer->tail + 1) & (BUFFERSIZE - 1);
	return output;
}
     690:	08 95       	ret

00000692 <writeUART>:

void writeUART(buffer *wbuffer, char input[], unsigned char size){
     692:	ef 92       	push	r14
     694:	ff 92       	push	r15
     696:	0f 93       	push	r16
     698:	1f 93       	push	r17
     69a:	cf 93       	push	r28
     69c:	df 93       	push	r29
     69e:	7c 01       	movw	r14, r24
     6a0:	8b 01       	movw	r16, r22
     6a2:	d4 2f       	mov	r29, r20
	for(unsigned char i = 0; i < size; i++){ // there is a possibility here of writing a message larger than the buffer but whatever.
     6a4:	c0 e0       	ldi	r28, 0x00	; 0
     6a6:	08 c0       	rjmp	.+16     	; 0x6b8 <writeUART+0x26>
		writeBuffer(wbuffer, input[i]);
     6a8:	f8 01       	movw	r30, r16
     6aa:	ec 0f       	add	r30, r28
     6ac:	f1 1d       	adc	r31, r1
     6ae:	60 81       	ld	r22, Z
     6b0:	c7 01       	movw	r24, r14
     6b2:	0e 94 0b 03 	call	0x616	; 0x616 <writeBuffer>
	rbuffer->tail = (rbuffer->tail + 1) & (BUFFERSIZE - 1);
	return output;
}

void writeUART(buffer *wbuffer, char input[], unsigned char size){
	for(unsigned char i = 0; i < size; i++){ // there is a possibility here of writing a message larger than the buffer but whatever.
     6b6:	cf 5f       	subi	r28, 0xFF	; 255
     6b8:	cd 17       	cp	r28, r29
     6ba:	b0 f3       	brcs	.-20     	; 0x6a8 <writeUART+0x16>
		writeBuffer(wbuffer, input[i]);
	}	
}
     6bc:	df 91       	pop	r29
     6be:	cf 91       	pop	r28
     6c0:	1f 91       	pop	r17
     6c2:	0f 91       	pop	r16
     6c4:	ff 90       	pop	r15
     6c6:	ef 90       	pop	r14
     6c8:	08 95       	ret

000006ca <enableUART0Tx>:

void enableUART0Tx(){ //abstraction for uart tx enabling.
	if(UART0TxBuffer->head != UART0TxBuffer->tail){
     6ca:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <UART0TxBuffer>
     6ce:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <UART0TxBuffer+0x1>
     6d2:	fc 01       	movw	r30, r24
     6d4:	e0 58       	subi	r30, 0x80	; 128
     6d6:	ff 4f       	sbci	r31, 0xFF	; 255
     6d8:	20 81       	ld	r18, Z
     6da:	31 96       	adiw	r30, 0x01	; 1
     6dc:	80 81       	ld	r24, Z
     6de:	28 17       	cp	r18, r24
     6e0:	29 f0       	breq	.+10     	; 0x6ec <enableUART0Tx+0x22>
	UCSR0B |= (1 << UDRIE0);
     6e2:	e1 ec       	ldi	r30, 0xC1	; 193
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
     6e6:	80 81       	ld	r24, Z
     6e8:	80 62       	ori	r24, 0x20	; 32
     6ea:	80 83       	st	Z, r24
     6ec:	08 95       	ret

000006ee <enableUART1Tx>:
	}
}

void enableUART1Tx(){
	if(UART1TxBuffer->head != UART1TxBuffer->tail){
     6ee:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <UART1TxBuffer>
     6f2:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <UART1TxBuffer+0x1>
     6f6:	fc 01       	movw	r30, r24
     6f8:	e0 58       	subi	r30, 0x80	; 128
     6fa:	ff 4f       	sbci	r31, 0xFF	; 255
     6fc:	20 81       	ld	r18, Z
     6fe:	31 96       	adiw	r30, 0x01	; 1
     700:	80 81       	ld	r24, Z
     702:	28 17       	cp	r18, r24
     704:	29 f0       	breq	.+10     	; 0x710 <enableUART1Tx+0x22>
	UCSR1B |= (1 << UDRIE1);
     706:	e9 ec       	ldi	r30, 0xC9	; 201
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	80 81       	ld	r24, Z
     70c:	80 62       	ori	r24, 0x20	; 32
     70e:	80 83       	st	Z, r24
     710:	08 95       	ret

00000712 <__vector_18>:
	}
}

ISR(USART0_RX_vect){ //write to buffer from udr when receiving data.
     712:	1f 92       	push	r1
     714:	0f 92       	push	r0
     716:	0f b6       	in	r0, 0x3f	; 63
     718:	0f 92       	push	r0
     71a:	11 24       	eor	r1, r1
     71c:	2f 93       	push	r18
     71e:	3f 93       	push	r19
     720:	4f 93       	push	r20
     722:	5f 93       	push	r21
     724:	6f 93       	push	r22
     726:	7f 93       	push	r23
     728:	8f 93       	push	r24
     72a:	9f 93       	push	r25
     72c:	af 93       	push	r26
     72e:	bf 93       	push	r27
     730:	ef 93       	push	r30
     732:	ff 93       	push	r31
	writeBuffer(UART0RxBuffer, UDR0);
     734:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     738:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <UART0RxBuffer>
     73c:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <UART0RxBuffer+0x1>
     740:	0e 94 0b 03 	call	0x616	; 0x616 <writeBuffer>
}
     744:	ff 91       	pop	r31
     746:	ef 91       	pop	r30
     748:	bf 91       	pop	r27
     74a:	af 91       	pop	r26
     74c:	9f 91       	pop	r25
     74e:	8f 91       	pop	r24
     750:	7f 91       	pop	r23
     752:	6f 91       	pop	r22
     754:	5f 91       	pop	r21
     756:	4f 91       	pop	r20
     758:	3f 91       	pop	r19
     75a:	2f 91       	pop	r18
     75c:	0f 90       	pop	r0
     75e:	0f be       	out	0x3f, r0	; 63
     760:	0f 90       	pop	r0
     762:	1f 90       	pop	r1
     764:	18 95       	reti

00000766 <__vector_28>:
volatile unsigned char count = 0;
ISR(USART1_RX_vect){
     766:	1f 92       	push	r1
     768:	0f 92       	push	r0
     76a:	0f b6       	in	r0, 0x3f	; 63
     76c:	0f 92       	push	r0
     76e:	11 24       	eor	r1, r1
     770:	2f 93       	push	r18
     772:	4f 93       	push	r20
     774:	5f 93       	push	r21
     776:	8f 93       	push	r24
     778:	9f 93       	push	r25
     77a:	af 93       	push	r26
     77c:	bf 93       	push	r27
     77e:	ef 93       	push	r30
     780:	ff 93       	push	r31
	if(UDR1 == '$'){ //$ means the nmea message 
     782:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
     786:	84 32       	cpi	r24, 0x24	; 36
     788:	81 f4       	brne	.+32     	; 0x7aa <__vector_28+0x44>
		UART1RxBuffer[count++] = UDR1;
     78a:	e0 91 49 01 	lds	r30, 0x0149	; 0x800149 <UART1RxBuffer>
     78e:	f0 91 4a 01 	lds	r31, 0x014A	; 0x80014a <UART1RxBuffer+0x1>
     792:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <count>
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	98 0f       	add	r25, r24
     79a:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <count>
     79e:	e8 0f       	add	r30, r24
     7a0:	f1 1d       	adc	r31, r1
     7a2:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
     7a6:	80 83       	st	Z, r24
     7a8:	37 c0       	rjmp	.+110    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
	}
	else if(UDR1 == '*'){
     7aa:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
     7ae:	8a 32       	cpi	r24, 0x2A	; 42
     7b0:	21 f5       	brne	.+72     	; 0x7fa <__vector_28+0x94>
		UART1RxBuffer[count] = UDR1;
     7b2:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <count>
     7b6:	e0 91 49 01 	lds	r30, 0x0149	; 0x800149 <UART1RxBuffer>
     7ba:	f0 91 4a 01 	lds	r31, 0x014A	; 0x80014a <UART1RxBuffer+0x1>
     7be:	e8 0f       	add	r30, r24
     7c0:	f1 1d       	adc	r31, r1
     7c2:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
     7c6:	80 83       	st	Z, r24
		for(unsigned char i = 0; i < NMEALENGTH; i++){
     7c8:	20 e0       	ldi	r18, 0x00	; 0
     7ca:	12 c0       	rjmp	.+36     	; 0x7f0 <__vector_28+0x8a>
			UART1RxOutput[i] = UART1RxBuffer[i];
     7cc:	82 2f       	mov	r24, r18
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	e0 91 47 01 	lds	r30, 0x0147	; 0x800147 <UART1RxOutput>
     7d4:	f0 91 48 01 	lds	r31, 0x0148	; 0x800148 <UART1RxOutput+0x1>
     7d8:	e8 0f       	add	r30, r24
     7da:	f9 1f       	adc	r31, r25
     7dc:	40 91 49 01 	lds	r20, 0x0149	; 0x800149 <UART1RxBuffer>
     7e0:	50 91 4a 01 	lds	r21, 0x014A	; 0x80014a <UART1RxBuffer+0x1>
     7e4:	da 01       	movw	r26, r20
     7e6:	a8 0f       	add	r26, r24
     7e8:	b9 1f       	adc	r27, r25
     7ea:	8c 91       	ld	r24, X
     7ec:	80 83       	st	Z, r24
	if(UDR1 == '$'){ //$ means the nmea message 
		UART1RxBuffer[count++] = UDR1;
	}
	else if(UDR1 == '*'){
		UART1RxBuffer[count] = UDR1;
		for(unsigned char i = 0; i < NMEALENGTH; i++){
     7ee:	2f 5f       	subi	r18, 0xFF	; 255
     7f0:	22 35       	cpi	r18, 0x52	; 82
     7f2:	60 f3       	brcs	.-40     	; 0x7cc <__vector_28+0x66>
			UART1RxOutput[i] = UART1RxBuffer[i];
		}
		count = 0;
     7f4:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <count>
     7f8:	0f c0       	rjmp	.+30     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
	}
	else{
		UART1RxBuffer[count++] = UDR1;
     7fa:	e0 91 49 01 	lds	r30, 0x0149	; 0x800149 <UART1RxBuffer>
     7fe:	f0 91 4a 01 	lds	r31, 0x014A	; 0x80014a <UART1RxBuffer+0x1>
     802:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <count>
     806:	91 e0       	ldi	r25, 0x01	; 1
     808:	98 0f       	add	r25, r24
     80a:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <count>
     80e:	e8 0f       	add	r30, r24
     810:	f1 1d       	adc	r31, r1
     812:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
     816:	80 83       	st	Z, r24
	}
}
     818:	ff 91       	pop	r31
     81a:	ef 91       	pop	r30
     81c:	bf 91       	pop	r27
     81e:	af 91       	pop	r26
     820:	9f 91       	pop	r25
     822:	8f 91       	pop	r24
     824:	5f 91       	pop	r21
     826:	4f 91       	pop	r20
     828:	2f 91       	pop	r18
     82a:	0f 90       	pop	r0
     82c:	0f be       	out	0x3f, r0	; 63
     82e:	0f 90       	pop	r0
     830:	1f 90       	pop	r1
     832:	18 95       	reti

00000834 <__vector_19>:

ISR(USART0_UDRE_vect){ //read from buffer till end and then disable UARTTX automatically when buffer runs empty
     834:	1f 92       	push	r1
     836:	0f 92       	push	r0
     838:	0f b6       	in	r0, 0x3f	; 63
     83a:	0f 92       	push	r0
     83c:	11 24       	eor	r1, r1
     83e:	2f 93       	push	r18
     840:	3f 93       	push	r19
     842:	4f 93       	push	r20
     844:	5f 93       	push	r21
     846:	6f 93       	push	r22
     848:	7f 93       	push	r23
     84a:	8f 93       	push	r24
     84c:	9f 93       	push	r25
     84e:	af 93       	push	r26
     850:	bf 93       	push	r27
     852:	ef 93       	push	r30
     854:	ff 93       	push	r31
	if(UART0TxBuffer->tail != UART0TxBuffer->head){
     856:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <UART0TxBuffer>
     85a:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <UART0TxBuffer+0x1>
     85e:	fc 01       	movw	r30, r24
     860:	ef 57       	subi	r30, 0x7F	; 127
     862:	ff 4f       	sbci	r31, 0xFF	; 255
     864:	30 81       	ld	r19, Z
     866:	31 97       	sbiw	r30, 0x01	; 1
     868:	20 81       	ld	r18, Z
     86a:	32 17       	cp	r19, r18
     86c:	29 f0       	breq	.+10     	; 0x878 <__vector_19+0x44>
		UDR0 = readBuffer(UART0TxBuffer);
     86e:	0e 94 2f 03 	call	0x65e	; 0x65e <readBuffer>
     872:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     876:	05 c0       	rjmp	.+10     	; 0x882 <__vector_19+0x4e>
	}
	else{
		UCSR0B &= ~(1 << UDRIE0);
     878:	e1 ec       	ldi	r30, 0xC1	; 193
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	80 81       	ld	r24, Z
     87e:	8f 7d       	andi	r24, 0xDF	; 223
     880:	80 83       	st	Z, r24
	}
}
     882:	ff 91       	pop	r31
     884:	ef 91       	pop	r30
     886:	bf 91       	pop	r27
     888:	af 91       	pop	r26
     88a:	9f 91       	pop	r25
     88c:	8f 91       	pop	r24
     88e:	7f 91       	pop	r23
     890:	6f 91       	pop	r22
     892:	5f 91       	pop	r21
     894:	4f 91       	pop	r20
     896:	3f 91       	pop	r19
     898:	2f 91       	pop	r18
     89a:	0f 90       	pop	r0
     89c:	0f be       	out	0x3f, r0	; 63
     89e:	0f 90       	pop	r0
     8a0:	1f 90       	pop	r1
     8a2:	18 95       	reti

000008a4 <__vector_29>:

ISR(USART1_UDRE_vect){
     8a4:	1f 92       	push	r1
     8a6:	0f 92       	push	r0
     8a8:	0f b6       	in	r0, 0x3f	; 63
     8aa:	0f 92       	push	r0
     8ac:	11 24       	eor	r1, r1
     8ae:	2f 93       	push	r18
     8b0:	3f 93       	push	r19
     8b2:	4f 93       	push	r20
     8b4:	5f 93       	push	r21
     8b6:	6f 93       	push	r22
     8b8:	7f 93       	push	r23
     8ba:	8f 93       	push	r24
     8bc:	9f 93       	push	r25
     8be:	af 93       	push	r26
     8c0:	bf 93       	push	r27
     8c2:	ef 93       	push	r30
     8c4:	ff 93       	push	r31
	if(UART1TxBuffer->tail != UART1TxBuffer->head){
     8c6:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <UART1TxBuffer>
     8ca:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <UART1TxBuffer+0x1>
     8ce:	fc 01       	movw	r30, r24
     8d0:	ef 57       	subi	r30, 0x7F	; 127
     8d2:	ff 4f       	sbci	r31, 0xFF	; 255
     8d4:	30 81       	ld	r19, Z
     8d6:	31 97       	sbiw	r30, 0x01	; 1
     8d8:	20 81       	ld	r18, Z
     8da:	32 17       	cp	r19, r18
     8dc:	29 f0       	breq	.+10     	; 0x8e8 <__vector_29+0x44>
		UDR1 = readBuffer(UART1TxBuffer);
     8de:	0e 94 2f 03 	call	0x65e	; 0x65e <readBuffer>
     8e2:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
     8e6:	05 c0       	rjmp	.+10     	; 0x8f2 <__vector_29+0x4e>
	}
	else{
		UCSR1B &= ~(1 << UDRIE1);
     8e8:	e9 ec       	ldi	r30, 0xC9	; 201
     8ea:	f0 e0       	ldi	r31, 0x00	; 0
     8ec:	80 81       	ld	r24, Z
     8ee:	8f 7d       	andi	r24, 0xDF	; 223
     8f0:	80 83       	st	Z, r24
	}
}
     8f2:	ff 91       	pop	r31
     8f4:	ef 91       	pop	r30
     8f6:	bf 91       	pop	r27
     8f8:	af 91       	pop	r26
     8fa:	9f 91       	pop	r25
     8fc:	8f 91       	pop	r24
     8fe:	7f 91       	pop	r23
     900:	6f 91       	pop	r22
     902:	5f 91       	pop	r21
     904:	4f 91       	pop	r20
     906:	3f 91       	pop	r19
     908:	2f 91       	pop	r18
     90a:	0f 90       	pop	r0
     90c:	0f be       	out	0x3f, r0	; 63
     90e:	0f 90       	pop	r0
     910:	1f 90       	pop	r1
     912:	18 95       	reti

00000914 <ADCint>:
}

uint16_t geofence_check(float current_lat, float current_lon){
	float distance = distance_calculation(home_lat, home_lon, current_lat, current_lon);
	return(distance>home_radius);
}
     914:	80 e4       	ldi	r24, 0x40	; 64
     916:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     91a:	84 e8       	ldi	r24, 0x84	; 132
     91c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     920:	08 95       	ret

00000922 <ADCreading>:
     922:	ea e7       	ldi	r30, 0x7A	; 122
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	80 81       	ld	r24, Z
     928:	80 64       	ori	r24, 0x40	; 64
     92a:	80 83       	st	Z, r24
     92c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     930:	86 fd       	sbrc	r24, 6
     932:	fc cf       	rjmp	.-8      	; 0x92c <ADCreading+0xa>
     934:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     938:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     93c:	08 95       	ret

0000093e <geofence_radius>:
     93e:	0f 93       	push	r16
     940:	1f 93       	push	r17
     942:	0e 94 91 04 	call	0x922	; 0x922 <ADCreading>
     946:	ac 01       	movw	r20, r24
     948:	60 e0       	ldi	r22, 0x00	; 0
     94a:	70 e0       	ldi	r23, 0x00	; 0
     94c:	db 01       	movw	r26, r22
     94e:	ca 01       	movw	r24, r20
     950:	88 0f       	add	r24, r24
     952:	99 1f       	adc	r25, r25
     954:	aa 1f       	adc	r26, r26
     956:	bb 1f       	adc	r27, r27
     958:	88 0f       	add	r24, r24
     95a:	99 1f       	adc	r25, r25
     95c:	aa 1f       	adc	r26, r26
     95e:	bb 1f       	adc	r27, r27
     960:	8c 01       	movw	r16, r24
     962:	9d 01       	movw	r18, r26
     964:	04 0f       	add	r16, r20
     966:	15 1f       	adc	r17, r21
     968:	26 1f       	adc	r18, r22
     96a:	37 1f       	adc	r19, r23
     96c:	c9 01       	movw	r24, r18
     96e:	b8 01       	movw	r22, r16
     970:	2f ef       	ldi	r18, 0xFF	; 255
     972:	33 e0       	ldi	r19, 0x03	; 3
     974:	40 e0       	ldi	r20, 0x00	; 0
     976:	50 e0       	ldi	r21, 0x00	; 0
     978:	0e 94 44 08 	call	0x1088	; 0x1088 <__udivmodsi4>
     97c:	c9 01       	movw	r24, r18
     97e:	05 96       	adiw	r24, 0x05	; 5
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	08 95       	ret

00000986 <LEdint>:
     986:	8a b1       	in	r24, 0x0a	; 10
     988:	80 63       	ori	r24, 0x30	; 48
     98a:	8a b9       	out	0x0a, r24	; 10
     98c:	08 95       	ret

0000098e <PWMint>:
     98e:	8a b1       	in	r24, 0x0a	; 10
     990:	80 64       	ori	r24, 0x40	; 64
     992:	8a b9       	out	0x0a, r24	; 10
     994:	83 e8       	ldi	r24, 0x83	; 131
     996:	84 bd       	out	0x24, r24	; 36
     998:	82 e0       	ldi	r24, 0x02	; 2
     99a:	85 bd       	out	0x25, r24	; 37
     99c:	08 95       	ret

0000099e <buzzeron>:
     99e:	8e ef       	ldi	r24, 0xFE	; 254
     9a0:	87 bd       	out	0x27, r24	; 39
     9a2:	08 95       	ret

000009a4 <buzzeroff>:
     9a4:	17 bc       	out	0x27, r1	; 39
     9a6:	08 95       	ret

000009a8 <area_save>:
     9a8:	0f 93       	push	r16
     9aa:	1f 93       	push	r17
     9ac:	60 93 56 01 	sts	0x0156, r22	; 0x800156 <home_lat>
     9b0:	70 93 57 01 	sts	0x0157, r23	; 0x800157 <home_lat+0x1>
     9b4:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <home_lat+0x2>
     9b8:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <home_lat+0x3>
     9bc:	20 93 52 01 	sts	0x0152, r18	; 0x800152 <home_lon>
     9c0:	30 93 53 01 	sts	0x0153, r19	; 0x800153 <home_lon+0x1>
     9c4:	40 93 54 01 	sts	0x0154, r20	; 0x800154 <home_lon+0x2>
     9c8:	50 93 55 01 	sts	0x0155, r21	; 0x800155 <home_lon+0x3>
     9cc:	10 93 51 01 	sts	0x0151, r17	; 0x800151 <home_radius+0x1>
     9d0:	00 93 50 01 	sts	0x0150, r16	; 0x800150 <home_radius>
     9d4:	1f 91       	pop	r17
     9d6:	0f 91       	pop	r16
     9d8:	08 95       	ret

000009da <deg_to_rad>:
     9da:	25 e3       	ldi	r18, 0x35	; 53
     9dc:	3a ef       	ldi	r19, 0xFA	; 250
     9de:	4e e8       	ldi	r20, 0x8E	; 142
     9e0:	5c e3       	ldi	r21, 0x3C	; 60
     9e2:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__mulsf3>
     9e6:	08 95       	ret

000009e8 <distance_calculation>:
     9e8:	4f 92       	push	r4
     9ea:	5f 92       	push	r5
     9ec:	6f 92       	push	r6
     9ee:	7f 92       	push	r7
     9f0:	8f 92       	push	r8
     9f2:	9f 92       	push	r9
     9f4:	af 92       	push	r10
     9f6:	bf 92       	push	r11
     9f8:	cf 92       	push	r12
     9fa:	df 92       	push	r13
     9fc:	ef 92       	push	r14
     9fe:	ff 92       	push	r15
     a00:	0f 93       	push	r16
     a02:	1f 93       	push	r17
     a04:	cf 93       	push	r28
     a06:	df 93       	push	r29
     a08:	cd b7       	in	r28, 0x3d	; 61
     a0a:	de b7       	in	r29, 0x3e	; 62
     a0c:	2c 97       	sbiw	r28, 0x0c	; 12
     a0e:	0f b6       	in	r0, 0x3f	; 63
     a10:	f8 94       	cli
     a12:	de bf       	out	0x3e, r29	; 62
     a14:	0f be       	out	0x3f, r0	; 63
     a16:	cd bf       	out	0x3d, r28	; 61
     a18:	2b 01       	movw	r4, r22
     a1a:	3c 01       	movw	r6, r24
     a1c:	2d 83       	std	Y+5, r18	; 0x05
     a1e:	3e 83       	std	Y+6, r19	; 0x06
     a20:	4f 83       	std	Y+7, r20	; 0x07
     a22:	58 87       	std	Y+8, r21	; 0x08
     a24:	e9 82       	std	Y+1, r14	; 0x01
     a26:	fa 82       	std	Y+2, r15	; 0x02
     a28:	0b 83       	std	Y+3, r16	; 0x03
     a2a:	1c 83       	std	Y+4, r17	; 0x04
     a2c:	9b 01       	movw	r18, r22
     a2e:	ac 01       	movw	r20, r24
     a30:	c8 01       	movw	r24, r16
     a32:	b7 01       	movw	r22, r14
     a34:	0e 94 af 05 	call	0xb5e	; 0xb5e <__subsf3>
     a38:	69 87       	std	Y+9, r22	; 0x09
     a3a:	7a 87       	std	Y+10, r23	; 0x0a
     a3c:	8b 87       	std	Y+11, r24	; 0x0b
     a3e:	9c 87       	std	Y+12, r25	; 0x0c
     a40:	2d 81       	ldd	r18, Y+5	; 0x05
     a42:	3e 81       	ldd	r19, Y+6	; 0x06
     a44:	4f 81       	ldd	r20, Y+7	; 0x07
     a46:	58 85       	ldd	r21, Y+8	; 0x08
     a48:	c6 01       	movw	r24, r12
     a4a:	b5 01       	movw	r22, r10
     a4c:	0e 94 af 05 	call	0xb5e	; 0xb5e <__subsf3>
     a50:	4b 01       	movw	r8, r22
     a52:	5c 01       	movw	r10, r24
     a54:	20 e0       	ldi	r18, 0x00	; 0
     a56:	3c e6       	ldi	r19, 0x6C	; 108
     a58:	49 ed       	ldi	r20, 0xD9	; 217
     a5a:	57 e4       	ldi	r21, 0x47	; 71
     a5c:	69 85       	ldd	r22, Y+9	; 0x09
     a5e:	7a 85       	ldd	r23, Y+10	; 0x0a
     a60:	8b 85       	ldd	r24, Y+11	; 0x0b
     a62:	9c 85       	ldd	r25, Y+12	; 0x0c
     a64:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__mulsf3>
     a68:	6b 01       	movw	r12, r22
     a6a:	7c 01       	movw	r14, r24
     a6c:	a3 01       	movw	r20, r6
     a6e:	92 01       	movw	r18, r4
     a70:	69 81       	ldd	r22, Y+1	; 0x01
     a72:	7a 81       	ldd	r23, Y+2	; 0x02
     a74:	8b 81       	ldd	r24, Y+3	; 0x03
     a76:	9c 81       	ldd	r25, Y+4	; 0x04
     a78:	0e 94 b0 05 	call	0xb60	; 0xb60 <__addsf3>
     a7c:	20 e0       	ldi	r18, 0x00	; 0
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	40 e0       	ldi	r20, 0x00	; 0
     a82:	5f e3       	ldi	r21, 0x3F	; 63
     a84:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__mulsf3>
     a88:	2b 01       	movw	r4, r22
     a8a:	3c 01       	movw	r6, r24
     a8c:	20 e0       	ldi	r18, 0x00	; 0
     a8e:	3c e6       	ldi	r19, 0x6C	; 108
     a90:	49 ed       	ldi	r20, 0xD9	; 217
     a92:	57 e4       	ldi	r21, 0x47	; 71
     a94:	c5 01       	movw	r24, r10
     a96:	b4 01       	movw	r22, r8
     a98:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__mulsf3>
     a9c:	4b 01       	movw	r8, r22
     a9e:	5c 01       	movw	r10, r24
     aa0:	c3 01       	movw	r24, r6
     aa2:	b2 01       	movw	r22, r4
     aa4:	0e 94 ed 04 	call	0x9da	; 0x9da <deg_to_rad>
     aa8:	0e 94 1c 06 	call	0xc38	; 0xc38 <cos>
     aac:	9b 01       	movw	r18, r22
     aae:	ac 01       	movw	r20, r24
     ab0:	c5 01       	movw	r24, r10
     ab2:	b4 01       	movw	r22, r8
     ab4:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__mulsf3>
     ab8:	4b 01       	movw	r8, r22
     aba:	5c 01       	movw	r10, r24
     abc:	a7 01       	movw	r20, r14
     abe:	96 01       	movw	r18, r12
     ac0:	c7 01       	movw	r24, r14
     ac2:	b6 01       	movw	r22, r12
     ac4:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__mulsf3>
     ac8:	6b 01       	movw	r12, r22
     aca:	7c 01       	movw	r14, r24
     acc:	a5 01       	movw	r20, r10
     ace:	94 01       	movw	r18, r8
     ad0:	c5 01       	movw	r24, r10
     ad2:	b4 01       	movw	r22, r8
     ad4:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__mulsf3>
     ad8:	4b 01       	movw	r8, r22
     ada:	5c 01       	movw	r10, r24
     adc:	a5 01       	movw	r20, r10
     ade:	94 01       	movw	r18, r8
     ae0:	c7 01       	movw	r24, r14
     ae2:	b6 01       	movw	r22, r12
     ae4:	0e 94 b0 05 	call	0xb60	; 0xb60 <__addsf3>
     ae8:	0e 94 90 07 	call	0xf20	; 0xf20 <sqrt>
     aec:	2c 96       	adiw	r28, 0x0c	; 12
     aee:	0f b6       	in	r0, 0x3f	; 63
     af0:	f8 94       	cli
     af2:	de bf       	out	0x3e, r29	; 62
     af4:	0f be       	out	0x3f, r0	; 63
     af6:	cd bf       	out	0x3d, r28	; 61
     af8:	df 91       	pop	r29
     afa:	cf 91       	pop	r28
     afc:	1f 91       	pop	r17
     afe:	0f 91       	pop	r16
     b00:	ff 90       	pop	r15
     b02:	ef 90       	pop	r14
     b04:	df 90       	pop	r13
     b06:	cf 90       	pop	r12
     b08:	bf 90       	pop	r11
     b0a:	af 90       	pop	r10
     b0c:	9f 90       	pop	r9
     b0e:	8f 90       	pop	r8
     b10:	7f 90       	pop	r7
     b12:	6f 90       	pop	r6
     b14:	5f 90       	pop	r5
     b16:	4f 90       	pop	r4
     b18:	08 95       	ret

00000b1a <buttoninit>:

void buttoninit(void) {
	DDRD &= ~(1 << DDD2);    // Set PD2 as input
     b1a:	8a b1       	in	r24, 0x0a	; 10
     b1c:	8b 7f       	andi	r24, 0xFB	; 251
     b1e:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PORTD2);  // Enable pull-up resistor
     b20:	8b b1       	in	r24, 0x0b	; 11
     b22:	84 60       	ori	r24, 0x04	; 4
     b24:	8b b9       	out	0x0b, r24	; 11
     b26:	08 95       	ret

00000b28 <button_pressed>:
}


uint8_t button_pressed(void) {
	static uint8_t last_state = 0;
	uint8_t current_state = !(PIND & (1 << PIND2));
     b28:	99 b1       	in	r25, 0x09	; 9
	if (current_state && !last_state) {
     b2a:	89 2f       	mov	r24, r25
     b2c:	84 70       	andi	r24, 0x04	; 4
     b2e:	92 fd       	sbrc	r25, 2
     b30:	10 c0       	rjmp	.+32     	; 0xb52 <button_pressed+0x2a>
     b32:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <last_state.1838>
     b36:	91 11       	cpse	r25, r1
     b38:	0c c0       	rjmp	.+24     	; 0xb52 <button_pressed+0x2a>
     b3a:	ef e3       	ldi	r30, 0x3F	; 63
     b3c:	fc e9       	ldi	r31, 0x9C	; 156
     b3e:	31 97       	sbiw	r30, 0x01	; 1
     b40:	f1 f7       	brne	.-4      	; 0xb3e <button_pressed+0x16>
     b42:	00 c0       	rjmp	.+0      	; 0xb44 <button_pressed+0x1c>
     b44:	00 00       	nop
		_delay_ms(10); // debounce delay
		if (!(PIND & (1 << PIND2))) {
     b46:	4a 99       	sbic	0x09, 2	; 9
     b48:	04 c0       	rjmp	.+8      	; 0xb52 <button_pressed+0x2a>
			last_state = 1;
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <last_state.1838>
			return 1; // Press detected
     b50:	08 95       	ret
		}
	}
	if (!current_state) {
     b52:	88 23       	and	r24, r24
     b54:	19 f0       	breq	.+6      	; 0xb5c <button_pressed+0x34>
		last_state = 0;
     b56:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <last_state.1838>
	}
	return 0;
     b5a:	80 e0       	ldi	r24, 0x00	; 0
}
     b5c:	08 95       	ret

00000b5e <__subsf3>:
     b5e:	50 58       	subi	r21, 0x80	; 128

00000b60 <__addsf3>:
     b60:	bb 27       	eor	r27, r27
     b62:	aa 27       	eor	r26, r26
     b64:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__addsf3x>
     b68:	0c 94 cf 06 	jmp	0xd9e	; 0xd9e <__fp_round>
     b6c:	0e 94 96 06 	call	0xd2c	; 0xd2c <__fp_pscA>
     b70:	38 f0       	brcs	.+14     	; 0xb80 <__addsf3+0x20>
     b72:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__fp_pscB>
     b76:	20 f0       	brcs	.+8      	; 0xb80 <__addsf3+0x20>
     b78:	39 f4       	brne	.+14     	; 0xb88 <__addsf3+0x28>
     b7a:	9f 3f       	cpi	r25, 0xFF	; 255
     b7c:	19 f4       	brne	.+6      	; 0xb84 <__addsf3+0x24>
     b7e:	26 f4       	brtc	.+8      	; 0xb88 <__addsf3+0x28>
     b80:	0c 94 93 06 	jmp	0xd26	; 0xd26 <__fp_nan>
     b84:	0e f4       	brtc	.+2      	; 0xb88 <__addsf3+0x28>
     b86:	e0 95       	com	r30
     b88:	e7 fb       	bst	r30, 7
     b8a:	0c 94 8d 06 	jmp	0xd1a	; 0xd1a <__fp_inf>

00000b8e <__addsf3x>:
     b8e:	e9 2f       	mov	r30, r25
     b90:	0e 94 f4 06 	call	0xde8	; 0xde8 <__fp_split3>
     b94:	58 f3       	brcs	.-42     	; 0xb6c <__addsf3+0xc>
     b96:	ba 17       	cp	r27, r26
     b98:	62 07       	cpc	r22, r18
     b9a:	73 07       	cpc	r23, r19
     b9c:	84 07       	cpc	r24, r20
     b9e:	95 07       	cpc	r25, r21
     ba0:	20 f0       	brcs	.+8      	; 0xbaa <__addsf3x+0x1c>
     ba2:	79 f4       	brne	.+30     	; 0xbc2 <__addsf3x+0x34>
     ba4:	a6 f5       	brtc	.+104    	; 0xc0e <__addsf3x+0x80>
     ba6:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <__fp_zero>
     baa:	0e f4       	brtc	.+2      	; 0xbae <__addsf3x+0x20>
     bac:	e0 95       	com	r30
     bae:	0b 2e       	mov	r0, r27
     bb0:	ba 2f       	mov	r27, r26
     bb2:	a0 2d       	mov	r26, r0
     bb4:	0b 01       	movw	r0, r22
     bb6:	b9 01       	movw	r22, r18
     bb8:	90 01       	movw	r18, r0
     bba:	0c 01       	movw	r0, r24
     bbc:	ca 01       	movw	r24, r20
     bbe:	a0 01       	movw	r20, r0
     bc0:	11 24       	eor	r1, r1
     bc2:	ff 27       	eor	r31, r31
     bc4:	59 1b       	sub	r21, r25
     bc6:	99 f0       	breq	.+38     	; 0xbee <__addsf3x+0x60>
     bc8:	59 3f       	cpi	r21, 0xF9	; 249
     bca:	50 f4       	brcc	.+20     	; 0xbe0 <__addsf3x+0x52>
     bcc:	50 3e       	cpi	r21, 0xE0	; 224
     bce:	68 f1       	brcs	.+90     	; 0xc2a <__addsf3x+0x9c>
     bd0:	1a 16       	cp	r1, r26
     bd2:	f0 40       	sbci	r31, 0x00	; 0
     bd4:	a2 2f       	mov	r26, r18
     bd6:	23 2f       	mov	r18, r19
     bd8:	34 2f       	mov	r19, r20
     bda:	44 27       	eor	r20, r20
     bdc:	58 5f       	subi	r21, 0xF8	; 248
     bde:	f3 cf       	rjmp	.-26     	; 0xbc6 <__addsf3x+0x38>
     be0:	46 95       	lsr	r20
     be2:	37 95       	ror	r19
     be4:	27 95       	ror	r18
     be6:	a7 95       	ror	r26
     be8:	f0 40       	sbci	r31, 0x00	; 0
     bea:	53 95       	inc	r21
     bec:	c9 f7       	brne	.-14     	; 0xbe0 <__addsf3x+0x52>
     bee:	7e f4       	brtc	.+30     	; 0xc0e <__addsf3x+0x80>
     bf0:	1f 16       	cp	r1, r31
     bf2:	ba 0b       	sbc	r27, r26
     bf4:	62 0b       	sbc	r22, r18
     bf6:	73 0b       	sbc	r23, r19
     bf8:	84 0b       	sbc	r24, r20
     bfa:	ba f0       	brmi	.+46     	; 0xc2a <__addsf3x+0x9c>
     bfc:	91 50       	subi	r25, 0x01	; 1
     bfe:	a1 f0       	breq	.+40     	; 0xc28 <__addsf3x+0x9a>
     c00:	ff 0f       	add	r31, r31
     c02:	bb 1f       	adc	r27, r27
     c04:	66 1f       	adc	r22, r22
     c06:	77 1f       	adc	r23, r23
     c08:	88 1f       	adc	r24, r24
     c0a:	c2 f7       	brpl	.-16     	; 0xbfc <__addsf3x+0x6e>
     c0c:	0e c0       	rjmp	.+28     	; 0xc2a <__addsf3x+0x9c>
     c0e:	ba 0f       	add	r27, r26
     c10:	62 1f       	adc	r22, r18
     c12:	73 1f       	adc	r23, r19
     c14:	84 1f       	adc	r24, r20
     c16:	48 f4       	brcc	.+18     	; 0xc2a <__addsf3x+0x9c>
     c18:	87 95       	ror	r24
     c1a:	77 95       	ror	r23
     c1c:	67 95       	ror	r22
     c1e:	b7 95       	ror	r27
     c20:	f7 95       	ror	r31
     c22:	9e 3f       	cpi	r25, 0xFE	; 254
     c24:	08 f0       	brcs	.+2      	; 0xc28 <__addsf3x+0x9a>
     c26:	b0 cf       	rjmp	.-160    	; 0xb88 <__addsf3+0x28>
     c28:	93 95       	inc	r25
     c2a:	88 0f       	add	r24, r24
     c2c:	08 f0       	brcs	.+2      	; 0xc30 <__addsf3x+0xa2>
     c2e:	99 27       	eor	r25, r25
     c30:	ee 0f       	add	r30, r30
     c32:	97 95       	ror	r25
     c34:	87 95       	ror	r24
     c36:	08 95       	ret

00000c38 <cos>:
     c38:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__fp_rempio2>
     c3c:	e3 95       	inc	r30
     c3e:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__fp_sinus>

00000c42 <__fixunssfsi>:
     c42:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__fp_splitA>
     c46:	88 f0       	brcs	.+34     	; 0xc6a <__fixunssfsi+0x28>
     c48:	9f 57       	subi	r25, 0x7F	; 127
     c4a:	98 f0       	brcs	.+38     	; 0xc72 <__fixunssfsi+0x30>
     c4c:	b9 2f       	mov	r27, r25
     c4e:	99 27       	eor	r25, r25
     c50:	b7 51       	subi	r27, 0x17	; 23
     c52:	b0 f0       	brcs	.+44     	; 0xc80 <__fixunssfsi+0x3e>
     c54:	e1 f0       	breq	.+56     	; 0xc8e <__fixunssfsi+0x4c>
     c56:	66 0f       	add	r22, r22
     c58:	77 1f       	adc	r23, r23
     c5a:	88 1f       	adc	r24, r24
     c5c:	99 1f       	adc	r25, r25
     c5e:	1a f0       	brmi	.+6      	; 0xc66 <__fixunssfsi+0x24>
     c60:	ba 95       	dec	r27
     c62:	c9 f7       	brne	.-14     	; 0xc56 <__fixunssfsi+0x14>
     c64:	14 c0       	rjmp	.+40     	; 0xc8e <__fixunssfsi+0x4c>
     c66:	b1 30       	cpi	r27, 0x01	; 1
     c68:	91 f0       	breq	.+36     	; 0xc8e <__fixunssfsi+0x4c>
     c6a:	0e 94 16 07 	call	0xe2c	; 0xe2c <__fp_zero>
     c6e:	b1 e0       	ldi	r27, 0x01	; 1
     c70:	08 95       	ret
     c72:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <__fp_zero>
     c76:	67 2f       	mov	r22, r23
     c78:	78 2f       	mov	r23, r24
     c7a:	88 27       	eor	r24, r24
     c7c:	b8 5f       	subi	r27, 0xF8	; 248
     c7e:	39 f0       	breq	.+14     	; 0xc8e <__fixunssfsi+0x4c>
     c80:	b9 3f       	cpi	r27, 0xF9	; 249
     c82:	cc f3       	brlt	.-14     	; 0xc76 <__fixunssfsi+0x34>
     c84:	86 95       	lsr	r24
     c86:	77 95       	ror	r23
     c88:	67 95       	ror	r22
     c8a:	b3 95       	inc	r27
     c8c:	d9 f7       	brne	.-10     	; 0xc84 <__fixunssfsi+0x42>
     c8e:	3e f4       	brtc	.+14     	; 0xc9e <__fixunssfsi+0x5c>
     c90:	90 95       	com	r25
     c92:	80 95       	com	r24
     c94:	70 95       	com	r23
     c96:	61 95       	neg	r22
     c98:	7f 4f       	sbci	r23, 0xFF	; 255
     c9a:	8f 4f       	sbci	r24, 0xFF	; 255
     c9c:	9f 4f       	sbci	r25, 0xFF	; 255
     c9e:	08 95       	ret

00000ca0 <__floatunsisf>:
     ca0:	e8 94       	clt
     ca2:	09 c0       	rjmp	.+18     	; 0xcb6 <__floatsisf+0x12>

00000ca4 <__floatsisf>:
     ca4:	97 fb       	bst	r25, 7
     ca6:	3e f4       	brtc	.+14     	; 0xcb6 <__floatsisf+0x12>
     ca8:	90 95       	com	r25
     caa:	80 95       	com	r24
     cac:	70 95       	com	r23
     cae:	61 95       	neg	r22
     cb0:	7f 4f       	sbci	r23, 0xFF	; 255
     cb2:	8f 4f       	sbci	r24, 0xFF	; 255
     cb4:	9f 4f       	sbci	r25, 0xFF	; 255
     cb6:	99 23       	and	r25, r25
     cb8:	a9 f0       	breq	.+42     	; 0xce4 <__floatsisf+0x40>
     cba:	f9 2f       	mov	r31, r25
     cbc:	96 e9       	ldi	r25, 0x96	; 150
     cbe:	bb 27       	eor	r27, r27
     cc0:	93 95       	inc	r25
     cc2:	f6 95       	lsr	r31
     cc4:	87 95       	ror	r24
     cc6:	77 95       	ror	r23
     cc8:	67 95       	ror	r22
     cca:	b7 95       	ror	r27
     ccc:	f1 11       	cpse	r31, r1
     cce:	f8 cf       	rjmp	.-16     	; 0xcc0 <__floatsisf+0x1c>
     cd0:	fa f4       	brpl	.+62     	; 0xd10 <__floatsisf+0x6c>
     cd2:	bb 0f       	add	r27, r27
     cd4:	11 f4       	brne	.+4      	; 0xcda <__floatsisf+0x36>
     cd6:	60 ff       	sbrs	r22, 0
     cd8:	1b c0       	rjmp	.+54     	; 0xd10 <__floatsisf+0x6c>
     cda:	6f 5f       	subi	r22, 0xFF	; 255
     cdc:	7f 4f       	sbci	r23, 0xFF	; 255
     cde:	8f 4f       	sbci	r24, 0xFF	; 255
     ce0:	9f 4f       	sbci	r25, 0xFF	; 255
     ce2:	16 c0       	rjmp	.+44     	; 0xd10 <__floatsisf+0x6c>
     ce4:	88 23       	and	r24, r24
     ce6:	11 f0       	breq	.+4      	; 0xcec <__floatsisf+0x48>
     ce8:	96 e9       	ldi	r25, 0x96	; 150
     cea:	11 c0       	rjmp	.+34     	; 0xd0e <__floatsisf+0x6a>
     cec:	77 23       	and	r23, r23
     cee:	21 f0       	breq	.+8      	; 0xcf8 <__floatsisf+0x54>
     cf0:	9e e8       	ldi	r25, 0x8E	; 142
     cf2:	87 2f       	mov	r24, r23
     cf4:	76 2f       	mov	r23, r22
     cf6:	05 c0       	rjmp	.+10     	; 0xd02 <__floatsisf+0x5e>
     cf8:	66 23       	and	r22, r22
     cfa:	71 f0       	breq	.+28     	; 0xd18 <__floatsisf+0x74>
     cfc:	96 e8       	ldi	r25, 0x86	; 134
     cfe:	86 2f       	mov	r24, r22
     d00:	70 e0       	ldi	r23, 0x00	; 0
     d02:	60 e0       	ldi	r22, 0x00	; 0
     d04:	2a f0       	brmi	.+10     	; 0xd10 <__floatsisf+0x6c>
     d06:	9a 95       	dec	r25
     d08:	66 0f       	add	r22, r22
     d0a:	77 1f       	adc	r23, r23
     d0c:	88 1f       	adc	r24, r24
     d0e:	da f7       	brpl	.-10     	; 0xd06 <__floatsisf+0x62>
     d10:	88 0f       	add	r24, r24
     d12:	96 95       	lsr	r25
     d14:	87 95       	ror	r24
     d16:	97 f9       	bld	r25, 7
     d18:	08 95       	ret

00000d1a <__fp_inf>:
     d1a:	97 f9       	bld	r25, 7
     d1c:	9f 67       	ori	r25, 0x7F	; 127
     d1e:	80 e8       	ldi	r24, 0x80	; 128
     d20:	70 e0       	ldi	r23, 0x00	; 0
     d22:	60 e0       	ldi	r22, 0x00	; 0
     d24:	08 95       	ret

00000d26 <__fp_nan>:
     d26:	9f ef       	ldi	r25, 0xFF	; 255
     d28:	80 ec       	ldi	r24, 0xC0	; 192
     d2a:	08 95       	ret

00000d2c <__fp_pscA>:
     d2c:	00 24       	eor	r0, r0
     d2e:	0a 94       	dec	r0
     d30:	16 16       	cp	r1, r22
     d32:	17 06       	cpc	r1, r23
     d34:	18 06       	cpc	r1, r24
     d36:	09 06       	cpc	r0, r25
     d38:	08 95       	ret

00000d3a <__fp_pscB>:
     d3a:	00 24       	eor	r0, r0
     d3c:	0a 94       	dec	r0
     d3e:	12 16       	cp	r1, r18
     d40:	13 06       	cpc	r1, r19
     d42:	14 06       	cpc	r1, r20
     d44:	05 06       	cpc	r0, r21
     d46:	08 95       	ret
     d48:	0c 94 93 06 	jmp	0xd26	; 0xd26 <__fp_nan>

00000d4c <__fp_rempio2>:
     d4c:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__fp_splitA>
     d50:	d8 f3       	brcs	.-10     	; 0xd48 <__fp_pscB+0xe>
     d52:	e8 94       	clt
     d54:	e0 e0       	ldi	r30, 0x00	; 0
     d56:	bb 27       	eor	r27, r27
     d58:	9f 57       	subi	r25, 0x7F	; 127
     d5a:	f0 f0       	brcs	.+60     	; 0xd98 <__fp_rempio2+0x4c>
     d5c:	2a ed       	ldi	r18, 0xDA	; 218
     d5e:	3f e0       	ldi	r19, 0x0F	; 15
     d60:	49 ec       	ldi	r20, 0xC9	; 201
     d62:	06 c0       	rjmp	.+12     	; 0xd70 <__fp_rempio2+0x24>
     d64:	ee 0f       	add	r30, r30
     d66:	bb 0f       	add	r27, r27
     d68:	66 1f       	adc	r22, r22
     d6a:	77 1f       	adc	r23, r23
     d6c:	88 1f       	adc	r24, r24
     d6e:	28 f0       	brcs	.+10     	; 0xd7a <__fp_rempio2+0x2e>
     d70:	b2 3a       	cpi	r27, 0xA2	; 162
     d72:	62 07       	cpc	r22, r18
     d74:	73 07       	cpc	r23, r19
     d76:	84 07       	cpc	r24, r20
     d78:	28 f0       	brcs	.+10     	; 0xd84 <__fp_rempio2+0x38>
     d7a:	b2 5a       	subi	r27, 0xA2	; 162
     d7c:	62 0b       	sbc	r22, r18
     d7e:	73 0b       	sbc	r23, r19
     d80:	84 0b       	sbc	r24, r20
     d82:	e3 95       	inc	r30
     d84:	9a 95       	dec	r25
     d86:	72 f7       	brpl	.-36     	; 0xd64 <__fp_rempio2+0x18>
     d88:	80 38       	cpi	r24, 0x80	; 128
     d8a:	30 f4       	brcc	.+12     	; 0xd98 <__fp_rempio2+0x4c>
     d8c:	9a 95       	dec	r25
     d8e:	bb 0f       	add	r27, r27
     d90:	66 1f       	adc	r22, r22
     d92:	77 1f       	adc	r23, r23
     d94:	88 1f       	adc	r24, r24
     d96:	d2 f7       	brpl	.-12     	; 0xd8c <__fp_rempio2+0x40>
     d98:	90 48       	sbci	r25, 0x80	; 128
     d9a:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__fp_mpack_finite>

00000d9e <__fp_round>:
     d9e:	09 2e       	mov	r0, r25
     da0:	03 94       	inc	r0
     da2:	00 0c       	add	r0, r0
     da4:	11 f4       	brne	.+4      	; 0xdaa <__fp_round+0xc>
     da6:	88 23       	and	r24, r24
     da8:	52 f0       	brmi	.+20     	; 0xdbe <__fp_round+0x20>
     daa:	bb 0f       	add	r27, r27
     dac:	40 f4       	brcc	.+16     	; 0xdbe <__fp_round+0x20>
     dae:	bf 2b       	or	r27, r31
     db0:	11 f4       	brne	.+4      	; 0xdb6 <__fp_round+0x18>
     db2:	60 ff       	sbrs	r22, 0
     db4:	04 c0       	rjmp	.+8      	; 0xdbe <__fp_round+0x20>
     db6:	6f 5f       	subi	r22, 0xFF	; 255
     db8:	7f 4f       	sbci	r23, 0xFF	; 255
     dba:	8f 4f       	sbci	r24, 0xFF	; 255
     dbc:	9f 4f       	sbci	r25, 0xFF	; 255
     dbe:	08 95       	ret

00000dc0 <__fp_sinus>:
     dc0:	ef 93       	push	r30
     dc2:	e0 ff       	sbrs	r30, 0
     dc4:	07 c0       	rjmp	.+14     	; 0xdd4 <__fp_sinus+0x14>
     dc6:	a2 ea       	ldi	r26, 0xA2	; 162
     dc8:	2a ed       	ldi	r18, 0xDA	; 218
     dca:	3f e0       	ldi	r19, 0x0F	; 15
     dcc:	49 ec       	ldi	r20, 0xC9	; 201
     dce:	5f eb       	ldi	r21, 0xBF	; 191
     dd0:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__addsf3x>
     dd4:	0e 94 cf 06 	call	0xd9e	; 0xd9e <__fp_round>
     dd8:	0f 90       	pop	r0
     dda:	03 94       	inc	r0
     ddc:	01 fc       	sbrc	r0, 1
     dde:	90 58       	subi	r25, 0x80	; 128
     de0:	e4 eb       	ldi	r30, 0xB4	; 180
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	0c 94 09 08 	jmp	0x1012	; 0x1012 <__fp_powsodd>

00000de8 <__fp_split3>:
     de8:	57 fd       	sbrc	r21, 7
     dea:	90 58       	subi	r25, 0x80	; 128
     dec:	44 0f       	add	r20, r20
     dee:	55 1f       	adc	r21, r21
     df0:	59 f0       	breq	.+22     	; 0xe08 <__fp_splitA+0x10>
     df2:	5f 3f       	cpi	r21, 0xFF	; 255
     df4:	71 f0       	breq	.+28     	; 0xe12 <__fp_splitA+0x1a>
     df6:	47 95       	ror	r20

00000df8 <__fp_splitA>:
     df8:	88 0f       	add	r24, r24
     dfa:	97 fb       	bst	r25, 7
     dfc:	99 1f       	adc	r25, r25
     dfe:	61 f0       	breq	.+24     	; 0xe18 <__fp_splitA+0x20>
     e00:	9f 3f       	cpi	r25, 0xFF	; 255
     e02:	79 f0       	breq	.+30     	; 0xe22 <__fp_splitA+0x2a>
     e04:	87 95       	ror	r24
     e06:	08 95       	ret
     e08:	12 16       	cp	r1, r18
     e0a:	13 06       	cpc	r1, r19
     e0c:	14 06       	cpc	r1, r20
     e0e:	55 1f       	adc	r21, r21
     e10:	f2 cf       	rjmp	.-28     	; 0xdf6 <__fp_split3+0xe>
     e12:	46 95       	lsr	r20
     e14:	f1 df       	rcall	.-30     	; 0xdf8 <__fp_splitA>
     e16:	08 c0       	rjmp	.+16     	; 0xe28 <__fp_splitA+0x30>
     e18:	16 16       	cp	r1, r22
     e1a:	17 06       	cpc	r1, r23
     e1c:	18 06       	cpc	r1, r24
     e1e:	99 1f       	adc	r25, r25
     e20:	f1 cf       	rjmp	.-30     	; 0xe04 <__fp_splitA+0xc>
     e22:	86 95       	lsr	r24
     e24:	71 05       	cpc	r23, r1
     e26:	61 05       	cpc	r22, r1
     e28:	08 94       	sec
     e2a:	08 95       	ret

00000e2c <__fp_zero>:
     e2c:	e8 94       	clt

00000e2e <__fp_szero>:
     e2e:	bb 27       	eor	r27, r27
     e30:	66 27       	eor	r22, r22
     e32:	77 27       	eor	r23, r23
     e34:	cb 01       	movw	r24, r22
     e36:	97 f9       	bld	r25, 7
     e38:	08 95       	ret

00000e3a <__mulsf3>:
     e3a:	0e 94 30 07 	call	0xe60	; 0xe60 <__mulsf3x>
     e3e:	0c 94 cf 06 	jmp	0xd9e	; 0xd9e <__fp_round>
     e42:	0e 94 96 06 	call	0xd2c	; 0xd2c <__fp_pscA>
     e46:	38 f0       	brcs	.+14     	; 0xe56 <__mulsf3+0x1c>
     e48:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__fp_pscB>
     e4c:	20 f0       	brcs	.+8      	; 0xe56 <__mulsf3+0x1c>
     e4e:	95 23       	and	r25, r21
     e50:	11 f0       	breq	.+4      	; 0xe56 <__mulsf3+0x1c>
     e52:	0c 94 8d 06 	jmp	0xd1a	; 0xd1a <__fp_inf>
     e56:	0c 94 93 06 	jmp	0xd26	; 0xd26 <__fp_nan>
     e5a:	11 24       	eor	r1, r1
     e5c:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__fp_szero>

00000e60 <__mulsf3x>:
     e60:	0e 94 f4 06 	call	0xde8	; 0xde8 <__fp_split3>
     e64:	70 f3       	brcs	.-36     	; 0xe42 <__mulsf3+0x8>

00000e66 <__mulsf3_pse>:
     e66:	95 9f       	mul	r25, r21
     e68:	c1 f3       	breq	.-16     	; 0xe5a <__mulsf3+0x20>
     e6a:	95 0f       	add	r25, r21
     e6c:	50 e0       	ldi	r21, 0x00	; 0
     e6e:	55 1f       	adc	r21, r21
     e70:	62 9f       	mul	r22, r18
     e72:	f0 01       	movw	r30, r0
     e74:	72 9f       	mul	r23, r18
     e76:	bb 27       	eor	r27, r27
     e78:	f0 0d       	add	r31, r0
     e7a:	b1 1d       	adc	r27, r1
     e7c:	63 9f       	mul	r22, r19
     e7e:	aa 27       	eor	r26, r26
     e80:	f0 0d       	add	r31, r0
     e82:	b1 1d       	adc	r27, r1
     e84:	aa 1f       	adc	r26, r26
     e86:	64 9f       	mul	r22, r20
     e88:	66 27       	eor	r22, r22
     e8a:	b0 0d       	add	r27, r0
     e8c:	a1 1d       	adc	r26, r1
     e8e:	66 1f       	adc	r22, r22
     e90:	82 9f       	mul	r24, r18
     e92:	22 27       	eor	r18, r18
     e94:	b0 0d       	add	r27, r0
     e96:	a1 1d       	adc	r26, r1
     e98:	62 1f       	adc	r22, r18
     e9a:	73 9f       	mul	r23, r19
     e9c:	b0 0d       	add	r27, r0
     e9e:	a1 1d       	adc	r26, r1
     ea0:	62 1f       	adc	r22, r18
     ea2:	83 9f       	mul	r24, r19
     ea4:	a0 0d       	add	r26, r0
     ea6:	61 1d       	adc	r22, r1
     ea8:	22 1f       	adc	r18, r18
     eaa:	74 9f       	mul	r23, r20
     eac:	33 27       	eor	r19, r19
     eae:	a0 0d       	add	r26, r0
     eb0:	61 1d       	adc	r22, r1
     eb2:	23 1f       	adc	r18, r19
     eb4:	84 9f       	mul	r24, r20
     eb6:	60 0d       	add	r22, r0
     eb8:	21 1d       	adc	r18, r1
     eba:	82 2f       	mov	r24, r18
     ebc:	76 2f       	mov	r23, r22
     ebe:	6a 2f       	mov	r22, r26
     ec0:	11 24       	eor	r1, r1
     ec2:	9f 57       	subi	r25, 0x7F	; 127
     ec4:	50 40       	sbci	r21, 0x00	; 0
     ec6:	9a f0       	brmi	.+38     	; 0xeee <__mulsf3_pse+0x88>
     ec8:	f1 f0       	breq	.+60     	; 0xf06 <__mulsf3_pse+0xa0>
     eca:	88 23       	and	r24, r24
     ecc:	4a f0       	brmi	.+18     	; 0xee0 <__mulsf3_pse+0x7a>
     ece:	ee 0f       	add	r30, r30
     ed0:	ff 1f       	adc	r31, r31
     ed2:	bb 1f       	adc	r27, r27
     ed4:	66 1f       	adc	r22, r22
     ed6:	77 1f       	adc	r23, r23
     ed8:	88 1f       	adc	r24, r24
     eda:	91 50       	subi	r25, 0x01	; 1
     edc:	50 40       	sbci	r21, 0x00	; 0
     ede:	a9 f7       	brne	.-22     	; 0xeca <__mulsf3_pse+0x64>
     ee0:	9e 3f       	cpi	r25, 0xFE	; 254
     ee2:	51 05       	cpc	r21, r1
     ee4:	80 f0       	brcs	.+32     	; 0xf06 <__mulsf3_pse+0xa0>
     ee6:	0c 94 8d 06 	jmp	0xd1a	; 0xd1a <__fp_inf>
     eea:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__fp_szero>
     eee:	5f 3f       	cpi	r21, 0xFF	; 255
     ef0:	e4 f3       	brlt	.-8      	; 0xeea <__mulsf3_pse+0x84>
     ef2:	98 3e       	cpi	r25, 0xE8	; 232
     ef4:	d4 f3       	brlt	.-12     	; 0xeea <__mulsf3_pse+0x84>
     ef6:	86 95       	lsr	r24
     ef8:	77 95       	ror	r23
     efa:	67 95       	ror	r22
     efc:	b7 95       	ror	r27
     efe:	f7 95       	ror	r31
     f00:	e7 95       	ror	r30
     f02:	9f 5f       	subi	r25, 0xFF	; 255
     f04:	c1 f7       	brne	.-16     	; 0xef6 <__mulsf3_pse+0x90>
     f06:	fe 2b       	or	r31, r30
     f08:	88 0f       	add	r24, r24
     f0a:	91 1d       	adc	r25, r1
     f0c:	96 95       	lsr	r25
     f0e:	87 95       	ror	r24
     f10:	97 f9       	bld	r25, 7
     f12:	08 95       	ret
     f14:	19 f4       	brne	.+6      	; 0xf1c <__mulsf3_pse+0xb6>
     f16:	16 f4       	brtc	.+4      	; 0xf1c <__mulsf3_pse+0xb6>
     f18:	0c 94 93 06 	jmp	0xd26	; 0xd26 <__fp_nan>
     f1c:	0c 94 f4 07 	jmp	0xfe8	; 0xfe8 <__fp_mpack>

00000f20 <sqrt>:
     f20:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__fp_splitA>
     f24:	b8 f3       	brcs	.-18     	; 0xf14 <__mulsf3_pse+0xae>
     f26:	99 23       	and	r25, r25
     f28:	c9 f3       	breq	.-14     	; 0xf1c <__mulsf3_pse+0xb6>
     f2a:	b6 f3       	brts	.-20     	; 0xf18 <__mulsf3_pse+0xb2>
     f2c:	9f 57       	subi	r25, 0x7F	; 127
     f2e:	55 0b       	sbc	r21, r21
     f30:	87 ff       	sbrs	r24, 7
     f32:	0e 94 02 08 	call	0x1004	; 0x1004 <__fp_norm2>
     f36:	00 24       	eor	r0, r0
     f38:	a0 e6       	ldi	r26, 0x60	; 96
     f3a:	40 ea       	ldi	r20, 0xA0	; 160
     f3c:	90 01       	movw	r18, r0
     f3e:	80 58       	subi	r24, 0x80	; 128
     f40:	56 95       	lsr	r21
     f42:	97 95       	ror	r25
     f44:	28 f4       	brcc	.+10     	; 0xf50 <sqrt+0x30>
     f46:	80 5c       	subi	r24, 0xC0	; 192
     f48:	66 0f       	add	r22, r22
     f4a:	77 1f       	adc	r23, r23
     f4c:	88 1f       	adc	r24, r24
     f4e:	20 f0       	brcs	.+8      	; 0xf58 <sqrt+0x38>
     f50:	26 17       	cp	r18, r22
     f52:	37 07       	cpc	r19, r23
     f54:	48 07       	cpc	r20, r24
     f56:	30 f4       	brcc	.+12     	; 0xf64 <sqrt+0x44>
     f58:	62 1b       	sub	r22, r18
     f5a:	73 0b       	sbc	r23, r19
     f5c:	84 0b       	sbc	r24, r20
     f5e:	20 29       	or	r18, r0
     f60:	31 29       	or	r19, r1
     f62:	4a 2b       	or	r20, r26
     f64:	a6 95       	lsr	r26
     f66:	17 94       	ror	r1
     f68:	07 94       	ror	r0
     f6a:	20 25       	eor	r18, r0
     f6c:	31 25       	eor	r19, r1
     f6e:	4a 27       	eor	r20, r26
     f70:	58 f7       	brcc	.-42     	; 0xf48 <sqrt+0x28>
     f72:	66 0f       	add	r22, r22
     f74:	77 1f       	adc	r23, r23
     f76:	88 1f       	adc	r24, r24
     f78:	20 f0       	brcs	.+8      	; 0xf82 <sqrt+0x62>
     f7a:	26 17       	cp	r18, r22
     f7c:	37 07       	cpc	r19, r23
     f7e:	48 07       	cpc	r20, r24
     f80:	30 f4       	brcc	.+12     	; 0xf8e <sqrt+0x6e>
     f82:	62 0b       	sbc	r22, r18
     f84:	73 0b       	sbc	r23, r19
     f86:	84 0b       	sbc	r24, r20
     f88:	20 0d       	add	r18, r0
     f8a:	31 1d       	adc	r19, r1
     f8c:	41 1d       	adc	r20, r1
     f8e:	a0 95       	com	r26
     f90:	81 f7       	brne	.-32     	; 0xf72 <sqrt+0x52>
     f92:	b9 01       	movw	r22, r18
     f94:	84 2f       	mov	r24, r20
     f96:	91 58       	subi	r25, 0x81	; 129
     f98:	88 0f       	add	r24, r24
     f9a:	96 95       	lsr	r25
     f9c:	87 95       	ror	r24
     f9e:	08 95       	ret

00000fa0 <__fp_cmp>:
     fa0:	99 0f       	add	r25, r25
     fa2:	00 08       	sbc	r0, r0
     fa4:	55 0f       	add	r21, r21
     fa6:	aa 0b       	sbc	r26, r26
     fa8:	e0 e8       	ldi	r30, 0x80	; 128
     faa:	fe ef       	ldi	r31, 0xFE	; 254
     fac:	16 16       	cp	r1, r22
     fae:	17 06       	cpc	r1, r23
     fb0:	e8 07       	cpc	r30, r24
     fb2:	f9 07       	cpc	r31, r25
     fb4:	c0 f0       	brcs	.+48     	; 0xfe6 <__fp_cmp+0x46>
     fb6:	12 16       	cp	r1, r18
     fb8:	13 06       	cpc	r1, r19
     fba:	e4 07       	cpc	r30, r20
     fbc:	f5 07       	cpc	r31, r21
     fbe:	98 f0       	brcs	.+38     	; 0xfe6 <__fp_cmp+0x46>
     fc0:	62 1b       	sub	r22, r18
     fc2:	73 0b       	sbc	r23, r19
     fc4:	84 0b       	sbc	r24, r20
     fc6:	95 0b       	sbc	r25, r21
     fc8:	39 f4       	brne	.+14     	; 0xfd8 <__fp_cmp+0x38>
     fca:	0a 26       	eor	r0, r26
     fcc:	61 f0       	breq	.+24     	; 0xfe6 <__fp_cmp+0x46>
     fce:	23 2b       	or	r18, r19
     fd0:	24 2b       	or	r18, r20
     fd2:	25 2b       	or	r18, r21
     fd4:	21 f4       	brne	.+8      	; 0xfde <__fp_cmp+0x3e>
     fd6:	08 95       	ret
     fd8:	0a 26       	eor	r0, r26
     fda:	09 f4       	brne	.+2      	; 0xfde <__fp_cmp+0x3e>
     fdc:	a1 40       	sbci	r26, 0x01	; 1
     fde:	a6 95       	lsr	r26
     fe0:	8f ef       	ldi	r24, 0xFF	; 255
     fe2:	81 1d       	adc	r24, r1
     fe4:	81 1d       	adc	r24, r1
     fe6:	08 95       	ret

00000fe8 <__fp_mpack>:
     fe8:	9f 3f       	cpi	r25, 0xFF	; 255
     fea:	31 f0       	breq	.+12     	; 0xff8 <__fp_mpack_finite+0xc>

00000fec <__fp_mpack_finite>:
     fec:	91 50       	subi	r25, 0x01	; 1
     fee:	20 f4       	brcc	.+8      	; 0xff8 <__fp_mpack_finite+0xc>
     ff0:	87 95       	ror	r24
     ff2:	77 95       	ror	r23
     ff4:	67 95       	ror	r22
     ff6:	b7 95       	ror	r27
     ff8:	88 0f       	add	r24, r24
     ffa:	91 1d       	adc	r25, r1
     ffc:	96 95       	lsr	r25
     ffe:	87 95       	ror	r24
    1000:	97 f9       	bld	r25, 7
    1002:	08 95       	ret

00001004 <__fp_norm2>:
    1004:	91 50       	subi	r25, 0x01	; 1
    1006:	50 40       	sbci	r21, 0x00	; 0
    1008:	66 0f       	add	r22, r22
    100a:	77 1f       	adc	r23, r23
    100c:	88 1f       	adc	r24, r24
    100e:	d2 f7       	brpl	.-12     	; 0x1004 <__fp_norm2>
    1010:	08 95       	ret

00001012 <__fp_powsodd>:
    1012:	9f 93       	push	r25
    1014:	8f 93       	push	r24
    1016:	7f 93       	push	r23
    1018:	6f 93       	push	r22
    101a:	ff 93       	push	r31
    101c:	ef 93       	push	r30
    101e:	9b 01       	movw	r18, r22
    1020:	ac 01       	movw	r20, r24
    1022:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__mulsf3>
    1026:	ef 91       	pop	r30
    1028:	ff 91       	pop	r31
    102a:	0e 94 1d 08 	call	0x103a	; 0x103a <__fp_powser>
    102e:	2f 91       	pop	r18
    1030:	3f 91       	pop	r19
    1032:	4f 91       	pop	r20
    1034:	5f 91       	pop	r21
    1036:	0c 94 1d 07 	jmp	0xe3a	; 0xe3a <__mulsf3>

0000103a <__fp_powser>:
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	1f 93       	push	r17
    1040:	0f 93       	push	r16
    1042:	ff 92       	push	r15
    1044:	ef 92       	push	r14
    1046:	df 92       	push	r13
    1048:	7b 01       	movw	r14, r22
    104a:	8c 01       	movw	r16, r24
    104c:	68 94       	set
    104e:	06 c0       	rjmp	.+12     	; 0x105c <__fp_powser+0x22>
    1050:	da 2e       	mov	r13, r26
    1052:	ef 01       	movw	r28, r30
    1054:	0e 94 30 07 	call	0xe60	; 0xe60 <__mulsf3x>
    1058:	fe 01       	movw	r30, r28
    105a:	e8 94       	clt
    105c:	a5 91       	lpm	r26, Z+
    105e:	25 91       	lpm	r18, Z+
    1060:	35 91       	lpm	r19, Z+
    1062:	45 91       	lpm	r20, Z+
    1064:	55 91       	lpm	r21, Z+
    1066:	a6 f3       	brts	.-24     	; 0x1050 <__fp_powser+0x16>
    1068:	ef 01       	movw	r28, r30
    106a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__addsf3x>
    106e:	fe 01       	movw	r30, r28
    1070:	97 01       	movw	r18, r14
    1072:	a8 01       	movw	r20, r16
    1074:	da 94       	dec	r13
    1076:	69 f7       	brne	.-38     	; 0x1052 <__fp_powser+0x18>
    1078:	df 90       	pop	r13
    107a:	ef 90       	pop	r14
    107c:	ff 90       	pop	r15
    107e:	0f 91       	pop	r16
    1080:	1f 91       	pop	r17
    1082:	cf 91       	pop	r28
    1084:	df 91       	pop	r29
    1086:	08 95       	ret

00001088 <__udivmodsi4>:
    1088:	a1 e2       	ldi	r26, 0x21	; 33
    108a:	1a 2e       	mov	r1, r26
    108c:	aa 1b       	sub	r26, r26
    108e:	bb 1b       	sub	r27, r27
    1090:	fd 01       	movw	r30, r26
    1092:	0d c0       	rjmp	.+26     	; 0x10ae <__udivmodsi4_ep>

00001094 <__udivmodsi4_loop>:
    1094:	aa 1f       	adc	r26, r26
    1096:	bb 1f       	adc	r27, r27
    1098:	ee 1f       	adc	r30, r30
    109a:	ff 1f       	adc	r31, r31
    109c:	a2 17       	cp	r26, r18
    109e:	b3 07       	cpc	r27, r19
    10a0:	e4 07       	cpc	r30, r20
    10a2:	f5 07       	cpc	r31, r21
    10a4:	20 f0       	brcs	.+8      	; 0x10ae <__udivmodsi4_ep>
    10a6:	a2 1b       	sub	r26, r18
    10a8:	b3 0b       	sbc	r27, r19
    10aa:	e4 0b       	sbc	r30, r20
    10ac:	f5 0b       	sbc	r31, r21

000010ae <__udivmodsi4_ep>:
    10ae:	66 1f       	adc	r22, r22
    10b0:	77 1f       	adc	r23, r23
    10b2:	88 1f       	adc	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	1a 94       	dec	r1
    10b8:	69 f7       	brne	.-38     	; 0x1094 <__udivmodsi4_loop>
    10ba:	60 95       	com	r22
    10bc:	70 95       	com	r23
    10be:	80 95       	com	r24
    10c0:	90 95       	com	r25
    10c2:	9b 01       	movw	r18, r22
    10c4:	ac 01       	movw	r20, r24
    10c6:	bd 01       	movw	r22, r26
    10c8:	cf 01       	movw	r24, r30
    10ca:	08 95       	ret

000010cc <malloc>:
    10cc:	0f 93       	push	r16
    10ce:	1f 93       	push	r17
    10d0:	cf 93       	push	r28
    10d2:	df 93       	push	r29
    10d4:	82 30       	cpi	r24, 0x02	; 2
    10d6:	91 05       	cpc	r25, r1
    10d8:	10 f4       	brcc	.+4      	; 0x10de <malloc+0x12>
    10da:	82 e0       	ldi	r24, 0x02	; 2
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <__flp>
    10e2:	f0 91 7b 01 	lds	r31, 0x017B	; 0x80017b <__flp+0x1>
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	a0 e0       	ldi	r26, 0x00	; 0
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	30 97       	sbiw	r30, 0x00	; 0
    10f0:	19 f1       	breq	.+70     	; 0x1138 <malloc+0x6c>
    10f2:	40 81       	ld	r20, Z
    10f4:	51 81       	ldd	r21, Z+1	; 0x01
    10f6:	02 81       	ldd	r16, Z+2	; 0x02
    10f8:	13 81       	ldd	r17, Z+3	; 0x03
    10fa:	48 17       	cp	r20, r24
    10fc:	59 07       	cpc	r21, r25
    10fe:	c8 f0       	brcs	.+50     	; 0x1132 <malloc+0x66>
    1100:	84 17       	cp	r24, r20
    1102:	95 07       	cpc	r25, r21
    1104:	69 f4       	brne	.+26     	; 0x1120 <malloc+0x54>
    1106:	10 97       	sbiw	r26, 0x00	; 0
    1108:	31 f0       	breq	.+12     	; 0x1116 <malloc+0x4a>
    110a:	12 96       	adiw	r26, 0x02	; 2
    110c:	0c 93       	st	X, r16
    110e:	12 97       	sbiw	r26, 0x02	; 2
    1110:	13 96       	adiw	r26, 0x03	; 3
    1112:	1c 93       	st	X, r17
    1114:	27 c0       	rjmp	.+78     	; 0x1164 <malloc+0x98>
    1116:	00 93 7a 01 	sts	0x017A, r16	; 0x80017a <__flp>
    111a:	10 93 7b 01 	sts	0x017B, r17	; 0x80017b <__flp+0x1>
    111e:	22 c0       	rjmp	.+68     	; 0x1164 <malloc+0x98>
    1120:	21 15       	cp	r18, r1
    1122:	31 05       	cpc	r19, r1
    1124:	19 f0       	breq	.+6      	; 0x112c <malloc+0x60>
    1126:	42 17       	cp	r20, r18
    1128:	53 07       	cpc	r21, r19
    112a:	18 f4       	brcc	.+6      	; 0x1132 <malloc+0x66>
    112c:	9a 01       	movw	r18, r20
    112e:	bd 01       	movw	r22, r26
    1130:	ef 01       	movw	r28, r30
    1132:	df 01       	movw	r26, r30
    1134:	f8 01       	movw	r30, r16
    1136:	db cf       	rjmp	.-74     	; 0x10ee <malloc+0x22>
    1138:	21 15       	cp	r18, r1
    113a:	31 05       	cpc	r19, r1
    113c:	f9 f0       	breq	.+62     	; 0x117c <malloc+0xb0>
    113e:	28 1b       	sub	r18, r24
    1140:	39 0b       	sbc	r19, r25
    1142:	24 30       	cpi	r18, 0x04	; 4
    1144:	31 05       	cpc	r19, r1
    1146:	80 f4       	brcc	.+32     	; 0x1168 <malloc+0x9c>
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	9b 81       	ldd	r25, Y+3	; 0x03
    114c:	61 15       	cp	r22, r1
    114e:	71 05       	cpc	r23, r1
    1150:	21 f0       	breq	.+8      	; 0x115a <malloc+0x8e>
    1152:	fb 01       	movw	r30, r22
    1154:	93 83       	std	Z+3, r25	; 0x03
    1156:	82 83       	std	Z+2, r24	; 0x02
    1158:	04 c0       	rjmp	.+8      	; 0x1162 <malloc+0x96>
    115a:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <__flp+0x1>
    115e:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <__flp>
    1162:	fe 01       	movw	r30, r28
    1164:	32 96       	adiw	r30, 0x02	; 2
    1166:	44 c0       	rjmp	.+136    	; 0x11f0 <malloc+0x124>
    1168:	fe 01       	movw	r30, r28
    116a:	e2 0f       	add	r30, r18
    116c:	f3 1f       	adc	r31, r19
    116e:	81 93       	st	Z+, r24
    1170:	91 93       	st	Z+, r25
    1172:	22 50       	subi	r18, 0x02	; 2
    1174:	31 09       	sbc	r19, r1
    1176:	39 83       	std	Y+1, r19	; 0x01
    1178:	28 83       	st	Y, r18
    117a:	3a c0       	rjmp	.+116    	; 0x11f0 <malloc+0x124>
    117c:	20 91 78 01 	lds	r18, 0x0178	; 0x800178 <__brkval>
    1180:	30 91 79 01 	lds	r19, 0x0179	; 0x800179 <__brkval+0x1>
    1184:	23 2b       	or	r18, r19
    1186:	41 f4       	brne	.+16     	; 0x1198 <malloc+0xcc>
    1188:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    118c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1190:	30 93 79 01 	sts	0x0179, r19	; 0x800179 <__brkval+0x1>
    1194:	20 93 78 01 	sts	0x0178, r18	; 0x800178 <__brkval>
    1198:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    119c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    11a0:	21 15       	cp	r18, r1
    11a2:	31 05       	cpc	r19, r1
    11a4:	41 f4       	brne	.+16     	; 0x11b6 <malloc+0xea>
    11a6:	2d b7       	in	r18, 0x3d	; 61
    11a8:	3e b7       	in	r19, 0x3e	; 62
    11aa:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    11ae:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    11b2:	24 1b       	sub	r18, r20
    11b4:	35 0b       	sbc	r19, r21
    11b6:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <__brkval>
    11ba:	f0 91 79 01 	lds	r31, 0x0179	; 0x800179 <__brkval+0x1>
    11be:	e2 17       	cp	r30, r18
    11c0:	f3 07       	cpc	r31, r19
    11c2:	a0 f4       	brcc	.+40     	; 0x11ec <malloc+0x120>
    11c4:	2e 1b       	sub	r18, r30
    11c6:	3f 0b       	sbc	r19, r31
    11c8:	28 17       	cp	r18, r24
    11ca:	39 07       	cpc	r19, r25
    11cc:	78 f0       	brcs	.+30     	; 0x11ec <malloc+0x120>
    11ce:	ac 01       	movw	r20, r24
    11d0:	4e 5f       	subi	r20, 0xFE	; 254
    11d2:	5f 4f       	sbci	r21, 0xFF	; 255
    11d4:	24 17       	cp	r18, r20
    11d6:	35 07       	cpc	r19, r21
    11d8:	48 f0       	brcs	.+18     	; 0x11ec <malloc+0x120>
    11da:	4e 0f       	add	r20, r30
    11dc:	5f 1f       	adc	r21, r31
    11de:	50 93 79 01 	sts	0x0179, r21	; 0x800179 <__brkval+0x1>
    11e2:	40 93 78 01 	sts	0x0178, r20	; 0x800178 <__brkval>
    11e6:	81 93       	st	Z+, r24
    11e8:	91 93       	st	Z+, r25
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <malloc+0x124>
    11ec:	e0 e0       	ldi	r30, 0x00	; 0
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	cf 01       	movw	r24, r30
    11f2:	df 91       	pop	r29
    11f4:	cf 91       	pop	r28
    11f6:	1f 91       	pop	r17
    11f8:	0f 91       	pop	r16
    11fa:	08 95       	ret

000011fc <free>:
    11fc:	cf 93       	push	r28
    11fe:	df 93       	push	r29
    1200:	00 97       	sbiw	r24, 0x00	; 0
    1202:	09 f4       	brne	.+2      	; 0x1206 <free+0xa>
    1204:	81 c0       	rjmp	.+258    	; 0x1308 <free+0x10c>
    1206:	fc 01       	movw	r30, r24
    1208:	32 97       	sbiw	r30, 0x02	; 2
    120a:	13 82       	std	Z+3, r1	; 0x03
    120c:	12 82       	std	Z+2, r1	; 0x02
    120e:	a0 91 7a 01 	lds	r26, 0x017A	; 0x80017a <__flp>
    1212:	b0 91 7b 01 	lds	r27, 0x017B	; 0x80017b <__flp+0x1>
    1216:	10 97       	sbiw	r26, 0x00	; 0
    1218:	81 f4       	brne	.+32     	; 0x123a <free+0x3e>
    121a:	20 81       	ld	r18, Z
    121c:	31 81       	ldd	r19, Z+1	; 0x01
    121e:	82 0f       	add	r24, r18
    1220:	93 1f       	adc	r25, r19
    1222:	20 91 78 01 	lds	r18, 0x0178	; 0x800178 <__brkval>
    1226:	30 91 79 01 	lds	r19, 0x0179	; 0x800179 <__brkval+0x1>
    122a:	28 17       	cp	r18, r24
    122c:	39 07       	cpc	r19, r25
    122e:	51 f5       	brne	.+84     	; 0x1284 <free+0x88>
    1230:	f0 93 79 01 	sts	0x0179, r31	; 0x800179 <__brkval+0x1>
    1234:	e0 93 78 01 	sts	0x0178, r30	; 0x800178 <__brkval>
    1238:	67 c0       	rjmp	.+206    	; 0x1308 <free+0x10c>
    123a:	ed 01       	movw	r28, r26
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	ce 17       	cp	r28, r30
    1242:	df 07       	cpc	r29, r31
    1244:	40 f4       	brcc	.+16     	; 0x1256 <free+0x5a>
    1246:	4a 81       	ldd	r20, Y+2	; 0x02
    1248:	5b 81       	ldd	r21, Y+3	; 0x03
    124a:	9e 01       	movw	r18, r28
    124c:	41 15       	cp	r20, r1
    124e:	51 05       	cpc	r21, r1
    1250:	f1 f0       	breq	.+60     	; 0x128e <free+0x92>
    1252:	ea 01       	movw	r28, r20
    1254:	f5 cf       	rjmp	.-22     	; 0x1240 <free+0x44>
    1256:	d3 83       	std	Z+3, r29	; 0x03
    1258:	c2 83       	std	Z+2, r28	; 0x02
    125a:	40 81       	ld	r20, Z
    125c:	51 81       	ldd	r21, Z+1	; 0x01
    125e:	84 0f       	add	r24, r20
    1260:	95 1f       	adc	r25, r21
    1262:	c8 17       	cp	r28, r24
    1264:	d9 07       	cpc	r29, r25
    1266:	59 f4       	brne	.+22     	; 0x127e <free+0x82>
    1268:	88 81       	ld	r24, Y
    126a:	99 81       	ldd	r25, Y+1	; 0x01
    126c:	84 0f       	add	r24, r20
    126e:	95 1f       	adc	r25, r21
    1270:	02 96       	adiw	r24, 0x02	; 2
    1272:	91 83       	std	Z+1, r25	; 0x01
    1274:	80 83       	st	Z, r24
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	9b 81       	ldd	r25, Y+3	; 0x03
    127a:	93 83       	std	Z+3, r25	; 0x03
    127c:	82 83       	std	Z+2, r24	; 0x02
    127e:	21 15       	cp	r18, r1
    1280:	31 05       	cpc	r19, r1
    1282:	29 f4       	brne	.+10     	; 0x128e <free+0x92>
    1284:	f0 93 7b 01 	sts	0x017B, r31	; 0x80017b <__flp+0x1>
    1288:	e0 93 7a 01 	sts	0x017A, r30	; 0x80017a <__flp>
    128c:	3d c0       	rjmp	.+122    	; 0x1308 <free+0x10c>
    128e:	e9 01       	movw	r28, r18
    1290:	fb 83       	std	Y+3, r31	; 0x03
    1292:	ea 83       	std	Y+2, r30	; 0x02
    1294:	49 91       	ld	r20, Y+
    1296:	59 91       	ld	r21, Y+
    1298:	c4 0f       	add	r28, r20
    129a:	d5 1f       	adc	r29, r21
    129c:	ec 17       	cp	r30, r28
    129e:	fd 07       	cpc	r31, r29
    12a0:	61 f4       	brne	.+24     	; 0x12ba <free+0xbe>
    12a2:	80 81       	ld	r24, Z
    12a4:	91 81       	ldd	r25, Z+1	; 0x01
    12a6:	84 0f       	add	r24, r20
    12a8:	95 1f       	adc	r25, r21
    12aa:	02 96       	adiw	r24, 0x02	; 2
    12ac:	e9 01       	movw	r28, r18
    12ae:	99 83       	std	Y+1, r25	; 0x01
    12b0:	88 83       	st	Y, r24
    12b2:	82 81       	ldd	r24, Z+2	; 0x02
    12b4:	93 81       	ldd	r25, Z+3	; 0x03
    12b6:	9b 83       	std	Y+3, r25	; 0x03
    12b8:	8a 83       	std	Y+2, r24	; 0x02
    12ba:	e0 e0       	ldi	r30, 0x00	; 0
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	12 96       	adiw	r26, 0x02	; 2
    12c0:	8d 91       	ld	r24, X+
    12c2:	9c 91       	ld	r25, X
    12c4:	13 97       	sbiw	r26, 0x03	; 3
    12c6:	00 97       	sbiw	r24, 0x00	; 0
    12c8:	19 f0       	breq	.+6      	; 0x12d0 <free+0xd4>
    12ca:	fd 01       	movw	r30, r26
    12cc:	dc 01       	movw	r26, r24
    12ce:	f7 cf       	rjmp	.-18     	; 0x12be <free+0xc2>
    12d0:	8d 91       	ld	r24, X+
    12d2:	9c 91       	ld	r25, X
    12d4:	11 97       	sbiw	r26, 0x01	; 1
    12d6:	9d 01       	movw	r18, r26
    12d8:	2e 5f       	subi	r18, 0xFE	; 254
    12da:	3f 4f       	sbci	r19, 0xFF	; 255
    12dc:	82 0f       	add	r24, r18
    12de:	93 1f       	adc	r25, r19
    12e0:	20 91 78 01 	lds	r18, 0x0178	; 0x800178 <__brkval>
    12e4:	30 91 79 01 	lds	r19, 0x0179	; 0x800179 <__brkval+0x1>
    12e8:	28 17       	cp	r18, r24
    12ea:	39 07       	cpc	r19, r25
    12ec:	69 f4       	brne	.+26     	; 0x1308 <free+0x10c>
    12ee:	30 97       	sbiw	r30, 0x00	; 0
    12f0:	29 f4       	brne	.+10     	; 0x12fc <free+0x100>
    12f2:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <__flp+0x1>
    12f6:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <__flp>
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <free+0x104>
    12fc:	13 82       	std	Z+3, r1	; 0x03
    12fe:	12 82       	std	Z+2, r1	; 0x02
    1300:	b0 93 79 01 	sts	0x0179, r27	; 0x800179 <__brkval+0x1>
    1304:	a0 93 78 01 	sts	0x0178, r26	; 0x800178 <__brkval>
    1308:	df 91       	pop	r29
    130a:	cf 91       	pop	r28
    130c:	08 95       	ret

0000130e <atof>:
    130e:	66 27       	eor	r22, r22
    1310:	77 27       	eor	r23, r23
    1312:	0c 94 b1 09 	jmp	0x1362	; 0x1362 <strtod>

00001316 <atoi>:
    1316:	fc 01       	movw	r30, r24
    1318:	88 27       	eor	r24, r24
    131a:	99 27       	eor	r25, r25
    131c:	e8 94       	clt
    131e:	21 91       	ld	r18, Z+
    1320:	20 32       	cpi	r18, 0x20	; 32
    1322:	e9 f3       	breq	.-6      	; 0x131e <atoi+0x8>
    1324:	29 30       	cpi	r18, 0x09	; 9
    1326:	10 f0       	brcs	.+4      	; 0x132c <atoi+0x16>
    1328:	2e 30       	cpi	r18, 0x0E	; 14
    132a:	c8 f3       	brcs	.-14     	; 0x131e <atoi+0x8>
    132c:	2b 32       	cpi	r18, 0x2B	; 43
    132e:	41 f0       	breq	.+16     	; 0x1340 <atoi+0x2a>
    1330:	2d 32       	cpi	r18, 0x2D	; 45
    1332:	39 f4       	brne	.+14     	; 0x1342 <atoi+0x2c>
    1334:	68 94       	set
    1336:	04 c0       	rjmp	.+8      	; 0x1340 <atoi+0x2a>
    1338:	0e 94 a9 09 	call	0x1352	; 0x1352 <__mulhi_const_10>
    133c:	82 0f       	add	r24, r18
    133e:	91 1d       	adc	r25, r1
    1340:	21 91       	ld	r18, Z+
    1342:	20 53       	subi	r18, 0x30	; 48
    1344:	2a 30       	cpi	r18, 0x0A	; 10
    1346:	c0 f3       	brcs	.-16     	; 0x1338 <atoi+0x22>
    1348:	1e f4       	brtc	.+6      	; 0x1350 <atoi+0x3a>
    134a:	90 95       	com	r25
    134c:	81 95       	neg	r24
    134e:	9f 4f       	sbci	r25, 0xFF	; 255
    1350:	08 95       	ret

00001352 <__mulhi_const_10>:
    1352:	7a e0       	ldi	r23, 0x0A	; 10
    1354:	97 9f       	mul	r25, r23
    1356:	90 2d       	mov	r25, r0
    1358:	87 9f       	mul	r24, r23
    135a:	80 2d       	mov	r24, r0
    135c:	91 0d       	add	r25, r1
    135e:	11 24       	eor	r1, r1
    1360:	08 95       	ret

00001362 <strtod>:
    1362:	a0 e0       	ldi	r26, 0x00	; 0
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	e7 eb       	ldi	r30, 0xB7	; 183
    1368:	f9 e0       	ldi	r31, 0x09	; 9
    136a:	0c 94 39 0b 	jmp	0x1672	; 0x1672 <__prologue_saves__+0xc>
    136e:	ec 01       	movw	r28, r24
    1370:	6b 01       	movw	r12, r22
    1372:	61 15       	cp	r22, r1
    1374:	71 05       	cpc	r23, r1
    1376:	19 f0       	breq	.+6      	; 0x137e <strtod+0x1c>
    1378:	fb 01       	movw	r30, r22
    137a:	91 83       	std	Z+1, r25	; 0x01
    137c:	80 83       	st	Z, r24
    137e:	7e 01       	movw	r14, r28
    1380:	ff ef       	ldi	r31, 0xFF	; 255
    1382:	ef 1a       	sub	r14, r31
    1384:	ff 0a       	sbc	r15, r31
    1386:	08 81       	ld	r16, Y
    1388:	80 2f       	mov	r24, r16
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <isspace>
    1390:	89 2b       	or	r24, r25
    1392:	11 f0       	breq	.+4      	; 0x1398 <strtod+0x36>
    1394:	e7 01       	movw	r28, r14
    1396:	f3 cf       	rjmp	.-26     	; 0x137e <strtod+0x1c>
    1398:	0d 32       	cpi	r16, 0x2D	; 45
    139a:	39 f4       	brne	.+14     	; 0x13aa <strtod+0x48>
    139c:	7e 01       	movw	r14, r28
    139e:	82 e0       	ldi	r24, 0x02	; 2
    13a0:	e8 0e       	add	r14, r24
    13a2:	f1 1c       	adc	r15, r1
    13a4:	09 81       	ldd	r16, Y+1	; 0x01
    13a6:	11 e0       	ldi	r17, 0x01	; 1
    13a8:	08 c0       	rjmp	.+16     	; 0x13ba <strtod+0x58>
    13aa:	0b 32       	cpi	r16, 0x2B	; 43
    13ac:	29 f4       	brne	.+10     	; 0x13b8 <strtod+0x56>
    13ae:	7e 01       	movw	r14, r28
    13b0:	92 e0       	ldi	r25, 0x02	; 2
    13b2:	e9 0e       	add	r14, r25
    13b4:	f1 1c       	adc	r15, r1
    13b6:	09 81       	ldd	r16, Y+1	; 0x01
    13b8:	10 e0       	ldi	r17, 0x00	; 0
    13ba:	e7 01       	movw	r28, r14
    13bc:	21 97       	sbiw	r28, 0x01	; 1
    13be:	43 e0       	ldi	r20, 0x03	; 3
    13c0:	50 e0       	ldi	r21, 0x00	; 0
    13c2:	6a ed       	ldi	r22, 0xDA	; 218
    13c4:	70 e0       	ldi	r23, 0x00	; 0
    13c6:	ce 01       	movw	r24, r28
    13c8:	0e 94 08 0b 	call	0x1610	; 0x1610 <strncasecmp_P>
    13cc:	89 2b       	or	r24, r25
    13ce:	c1 f4       	brne	.+48     	; 0x1400 <strtod+0x9e>
    13d0:	23 96       	adiw	r28, 0x03	; 3
    13d2:	45 e0       	ldi	r20, 0x05	; 5
    13d4:	50 e0       	ldi	r21, 0x00	; 0
    13d6:	65 ed       	ldi	r22, 0xD5	; 213
    13d8:	70 e0       	ldi	r23, 0x00	; 0
    13da:	ce 01       	movw	r24, r28
    13dc:	0e 94 08 0b 	call	0x1610	; 0x1610 <strncasecmp_P>
    13e0:	89 2b       	or	r24, r25
    13e2:	09 f4       	brne	.+2      	; 0x13e6 <strtod+0x84>
    13e4:	25 96       	adiw	r28, 0x05	; 5
    13e6:	c1 14       	cp	r12, r1
    13e8:	d1 04       	cpc	r13, r1
    13ea:	19 f0       	breq	.+6      	; 0x13f2 <strtod+0x90>
    13ec:	f6 01       	movw	r30, r12
    13ee:	d1 83       	std	Z+1, r29	; 0x01
    13f0:	c0 83       	st	Z, r28
    13f2:	11 11       	cpse	r17, r1
    13f4:	f6 c0       	rjmp	.+492    	; 0x15e2 <strtod+0x280>
    13f6:	60 e0       	ldi	r22, 0x00	; 0
    13f8:	70 e0       	ldi	r23, 0x00	; 0
    13fa:	80 e8       	ldi	r24, 0x80	; 128
    13fc:	9f e7       	ldi	r25, 0x7F	; 127
    13fe:	fa c0       	rjmp	.+500    	; 0x15f4 <strtod+0x292>
    1400:	43 e0       	ldi	r20, 0x03	; 3
    1402:	50 e0       	ldi	r21, 0x00	; 0
    1404:	62 ed       	ldi	r22, 0xD2	; 210
    1406:	70 e0       	ldi	r23, 0x00	; 0
    1408:	ce 01       	movw	r24, r28
    140a:	0e 94 08 0b 	call	0x1610	; 0x1610 <strncasecmp_P>
    140e:	89 2b       	or	r24, r25
    1410:	59 f4       	brne	.+22     	; 0x1428 <strtod+0xc6>
    1412:	c1 14       	cp	r12, r1
    1414:	d1 04       	cpc	r13, r1
    1416:	09 f4       	brne	.+2      	; 0x141a <strtod+0xb8>
    1418:	e9 c0       	rjmp	.+466    	; 0x15ec <strtod+0x28a>
    141a:	f2 e0       	ldi	r31, 0x02	; 2
    141c:	ef 0e       	add	r14, r31
    141e:	f1 1c       	adc	r15, r1
    1420:	f6 01       	movw	r30, r12
    1422:	f1 82       	std	Z+1, r15	; 0x01
    1424:	e0 82       	st	Z, r14
    1426:	e2 c0       	rjmp	.+452    	; 0x15ec <strtod+0x28a>
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	a9 01       	movw	r20, r18
    142e:	c0 e0       	ldi	r28, 0x00	; 0
    1430:	d0 e0       	ldi	r29, 0x00	; 0
    1432:	f7 01       	movw	r30, r14
    1434:	80 ed       	ldi	r24, 0xD0	; 208
    1436:	a8 2e       	mov	r10, r24
    1438:	a0 0e       	add	r10, r16
    143a:	89 e0       	ldi	r24, 0x09	; 9
    143c:	8a 15       	cp	r24, r10
    143e:	30 f1       	brcs	.+76     	; 0x148c <strtod+0x12a>
    1440:	91 2f       	mov	r25, r17
    1442:	92 60       	ori	r25, 0x02	; 2
    1444:	b9 2e       	mov	r11, r25
    1446:	81 2f       	mov	r24, r17
    1448:	88 70       	andi	r24, 0x08	; 8
    144a:	12 ff       	sbrs	r17, 2
    144c:	04 c0       	rjmp	.+8      	; 0x1456 <strtod+0xf4>
    144e:	81 11       	cpse	r24, r1
    1450:	24 c0       	rjmp	.+72     	; 0x149a <strtod+0x138>
    1452:	21 96       	adiw	r28, 0x01	; 1
    1454:	22 c0       	rjmp	.+68     	; 0x149a <strtod+0x138>
    1456:	81 11       	cpse	r24, r1
    1458:	21 97       	sbiw	r28, 0x01	; 1
    145a:	a5 e0       	ldi	r26, 0x05	; 5
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	0e 94 28 0b 	call	0x1650	; 0x1650 <__muluhisi3>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	88 0f       	add	r24, r24
    1468:	99 1f       	adc	r25, r25
    146a:	aa 1f       	adc	r26, r26
    146c:	bb 1f       	adc	r27, r27
    146e:	9c 01       	movw	r18, r24
    1470:	ad 01       	movw	r20, r26
    1472:	2a 0d       	add	r18, r10
    1474:	31 1d       	adc	r19, r1
    1476:	41 1d       	adc	r20, r1
    1478:	51 1d       	adc	r21, r1
    147a:	28 39       	cpi	r18, 0x98	; 152
    147c:	89 e9       	ldi	r24, 0x99	; 153
    147e:	38 07       	cpc	r19, r24
    1480:	48 07       	cpc	r20, r24
    1482:	89 e1       	ldi	r24, 0x19	; 25
    1484:	58 07       	cpc	r21, r24
    1486:	48 f0       	brcs	.+18     	; 0x149a <strtod+0x138>
    1488:	16 60       	ori	r17, 0x06	; 6
    148a:	06 c0       	rjmp	.+12     	; 0x1498 <strtod+0x136>
    148c:	9e ef       	ldi	r25, 0xFE	; 254
    148e:	a9 12       	cpse	r10, r25
    1490:	0a c0       	rjmp	.+20     	; 0x14a6 <strtod+0x144>
    1492:	13 fd       	sbrc	r17, 3
    1494:	40 c0       	rjmp	.+128    	; 0x1516 <strtod+0x1b4>
    1496:	18 60       	ori	r17, 0x08	; 8
    1498:	b1 2e       	mov	r11, r17
    149a:	8f ef       	ldi	r24, 0xFF	; 255
    149c:	e8 1a       	sub	r14, r24
    149e:	f8 0a       	sbc	r15, r24
    14a0:	00 81       	ld	r16, Z
    14a2:	1b 2d       	mov	r17, r11
    14a4:	c6 cf       	rjmp	.-116    	; 0x1432 <strtod+0xd0>
    14a6:	80 2f       	mov	r24, r16
    14a8:	8f 7d       	andi	r24, 0xDF	; 223
    14aa:	85 34       	cpi	r24, 0x45	; 69
    14ac:	a1 f5       	brne	.+104    	; 0x1516 <strtod+0x1b4>
    14ae:	80 81       	ld	r24, Z
    14b0:	8d 32       	cpi	r24, 0x2D	; 45
    14b2:	11 f4       	brne	.+4      	; 0x14b8 <strtod+0x156>
    14b4:	10 61       	ori	r17, 0x10	; 16
    14b6:	06 c0       	rjmp	.+12     	; 0x14c4 <strtod+0x162>
    14b8:	8b 32       	cpi	r24, 0x2B	; 43
    14ba:	21 f0       	breq	.+8      	; 0x14c4 <strtod+0x162>
    14bc:	31 96       	adiw	r30, 0x01	; 1
    14be:	61 e0       	ldi	r22, 0x01	; 1
    14c0:	70 e0       	ldi	r23, 0x00	; 0
    14c2:	04 c0       	rjmp	.+8      	; 0x14cc <strtod+0x16a>
    14c4:	81 81       	ldd	r24, Z+1	; 0x01
    14c6:	32 96       	adiw	r30, 0x02	; 2
    14c8:	62 e0       	ldi	r22, 0x02	; 2
    14ca:	70 e0       	ldi	r23, 0x00	; 0
    14cc:	80 53       	subi	r24, 0x30	; 48
    14ce:	8a 30       	cpi	r24, 0x0A	; 10
    14d0:	18 f0       	brcs	.+6      	; 0x14d8 <strtod+0x176>
    14d2:	e6 1b       	sub	r30, r22
    14d4:	f7 0b       	sbc	r31, r23
    14d6:	1f c0       	rjmp	.+62     	; 0x1516 <strtod+0x1b4>
    14d8:	60 e0       	ldi	r22, 0x00	; 0
    14da:	70 e0       	ldi	r23, 0x00	; 0
    14dc:	60 38       	cpi	r22, 0x80	; 128
    14de:	9c e0       	ldi	r25, 0x0C	; 12
    14e0:	79 07       	cpc	r23, r25
    14e2:	5c f4       	brge	.+22     	; 0x14fa <strtod+0x198>
    14e4:	db 01       	movw	r26, r22
    14e6:	aa 0f       	add	r26, r26
    14e8:	bb 1f       	adc	r27, r27
    14ea:	aa 0f       	add	r26, r26
    14ec:	bb 1f       	adc	r27, r27
    14ee:	6a 0f       	add	r22, r26
    14f0:	7b 1f       	adc	r23, r27
    14f2:	66 0f       	add	r22, r22
    14f4:	77 1f       	adc	r23, r23
    14f6:	68 0f       	add	r22, r24
    14f8:	71 1d       	adc	r23, r1
    14fa:	31 96       	adiw	r30, 0x01	; 1
    14fc:	df 01       	movw	r26, r30
    14fe:	11 97       	sbiw	r26, 0x01	; 1
    1500:	8c 91       	ld	r24, X
    1502:	80 53       	subi	r24, 0x30	; 48
    1504:	8a 30       	cpi	r24, 0x0A	; 10
    1506:	50 f3       	brcs	.-44     	; 0x14dc <strtod+0x17a>
    1508:	14 ff       	sbrs	r17, 4
    150a:	03 c0       	rjmp	.+6      	; 0x1512 <strtod+0x1b0>
    150c:	71 95       	neg	r23
    150e:	61 95       	neg	r22
    1510:	71 09       	sbc	r23, r1
    1512:	c6 0f       	add	r28, r22
    1514:	d7 1f       	adc	r29, r23
    1516:	11 ff       	sbrs	r17, 1
    1518:	08 c0       	rjmp	.+16     	; 0x152a <strtod+0x1c8>
    151a:	c1 14       	cp	r12, r1
    151c:	d1 04       	cpc	r13, r1
    151e:	29 f0       	breq	.+10     	; 0x152a <strtod+0x1c8>
    1520:	cf 01       	movw	r24, r30
    1522:	01 97       	sbiw	r24, 0x01	; 1
    1524:	f6 01       	movw	r30, r12
    1526:	91 83       	std	Z+1, r25	; 0x01
    1528:	80 83       	st	Z, r24
    152a:	ca 01       	movw	r24, r20
    152c:	b9 01       	movw	r22, r18
    152e:	0e 94 50 06 	call	0xca0	; 0xca0 <__floatunsisf>
    1532:	21 2f       	mov	r18, r17
    1534:	23 70       	andi	r18, 0x03	; 3
    1536:	23 30       	cpi	r18, 0x03	; 3
    1538:	19 f0       	breq	.+6      	; 0x1540 <strtod+0x1de>
    153a:	4b 01       	movw	r8, r22
    153c:	5c 01       	movw	r10, r24
    153e:	06 c0       	rjmp	.+12     	; 0x154c <strtod+0x1ea>
    1540:	4b 01       	movw	r8, r22
    1542:	5c 01       	movw	r10, r24
    1544:	b7 fa       	bst	r11, 7
    1546:	b0 94       	com	r11
    1548:	b7 f8       	bld	r11, 7
    154a:	b0 94       	com	r11
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	a9 01       	movw	r20, r18
    1552:	c5 01       	movw	r24, r10
    1554:	b4 01       	movw	r22, r8
    1556:	0e 94 20 0b 	call	0x1640	; 0x1640 <__cmpsf2>
    155a:	88 23       	and	r24, r24
    155c:	09 f4       	brne	.+2      	; 0x1560 <strtod+0x1fe>
    155e:	3e c0       	rjmp	.+124    	; 0x15dc <strtod+0x27a>
    1560:	d7 ff       	sbrs	r29, 7
    1562:	06 c0       	rjmp	.+12     	; 0x1570 <strtod+0x20e>
    1564:	d1 95       	neg	r29
    1566:	c1 95       	neg	r28
    1568:	d1 09       	sbc	r29, r1
    156a:	01 ef       	ldi	r16, 0xF1	; 241
    156c:	10 e0       	ldi	r17, 0x00	; 0
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <strtod+0x212>
    1570:	09 e0       	ldi	r16, 0x09	; 9
    1572:	11 e0       	ldi	r17, 0x01	; 1
    1574:	68 01       	movw	r12, r16
    1576:	f8 e1       	ldi	r31, 0x18	; 24
    1578:	cf 1a       	sub	r12, r31
    157a:	d1 08       	sbc	r13, r1
    157c:	90 e2       	ldi	r25, 0x20	; 32
    157e:	e9 2e       	mov	r14, r25
    1580:	f1 2c       	mov	r15, r1
    1582:	ce 15       	cp	r28, r14
    1584:	df 05       	cpc	r29, r15
    1586:	74 f0       	brlt	.+28     	; 0x15a4 <strtod+0x242>
    1588:	f8 01       	movw	r30, r16
    158a:	25 91       	lpm	r18, Z+
    158c:	35 91       	lpm	r19, Z+
    158e:	45 91       	lpm	r20, Z+
    1590:	54 91       	lpm	r21, Z
    1592:	c5 01       	movw	r24, r10
    1594:	b4 01       	movw	r22, r8
    1596:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__mulsf3>
    159a:	4b 01       	movw	r8, r22
    159c:	5c 01       	movw	r10, r24
    159e:	ce 19       	sub	r28, r14
    15a0:	df 09       	sbc	r29, r15
    15a2:	ef cf       	rjmp	.-34     	; 0x1582 <strtod+0x220>
    15a4:	04 50       	subi	r16, 0x04	; 4
    15a6:	11 09       	sbc	r17, r1
    15a8:	f5 94       	asr	r15
    15aa:	e7 94       	ror	r14
    15ac:	0c 15       	cp	r16, r12
    15ae:	1d 05       	cpc	r17, r13
    15b0:	41 f7       	brne	.-48     	; 0x1582 <strtod+0x220>
    15b2:	8a 2d       	mov	r24, r10
    15b4:	88 0f       	add	r24, r24
    15b6:	8b 2d       	mov	r24, r11
    15b8:	88 1f       	adc	r24, r24
    15ba:	8f 3f       	cpi	r24, 0xFF	; 255
    15bc:	49 f0       	breq	.+18     	; 0x15d0 <strtod+0x26e>
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	a9 01       	movw	r20, r18
    15c4:	c5 01       	movw	r24, r10
    15c6:	b4 01       	movw	r22, r8
    15c8:	0e 94 20 0b 	call	0x1640	; 0x1640 <__cmpsf2>
    15cc:	81 11       	cpse	r24, r1
    15ce:	06 c0       	rjmp	.+12     	; 0x15dc <strtod+0x27a>
    15d0:	82 e2       	ldi	r24, 0x22	; 34
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <errno+0x1>
    15d8:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <errno>
    15dc:	c5 01       	movw	r24, r10
    15de:	b4 01       	movw	r22, r8
    15e0:	09 c0       	rjmp	.+18     	; 0x15f4 <strtod+0x292>
    15e2:	60 e0       	ldi	r22, 0x00	; 0
    15e4:	70 e0       	ldi	r23, 0x00	; 0
    15e6:	80 e8       	ldi	r24, 0x80	; 128
    15e8:	9f ef       	ldi	r25, 0xFF	; 255
    15ea:	04 c0       	rjmp	.+8      	; 0x15f4 <strtod+0x292>
    15ec:	60 e0       	ldi	r22, 0x00	; 0
    15ee:	70 e0       	ldi	r23, 0x00	; 0
    15f0:	80 ec       	ldi	r24, 0xC0	; 192
    15f2:	9f e7       	ldi	r25, 0x7F	; 127
    15f4:	cd b7       	in	r28, 0x3d	; 61
    15f6:	de b7       	in	r29, 0x3e	; 62
    15f8:	ec e0       	ldi	r30, 0x0C	; 12
    15fa:	0c 94 55 0b 	jmp	0x16aa	; 0x16aa <__epilogue_restores__+0xc>

000015fe <isspace>:
    15fe:	91 11       	cpse	r25, r1
    1600:	0c 94 25 0b 	jmp	0x164a	; 0x164a <__ctype_isfalse>
    1604:	80 32       	cpi	r24, 0x20	; 32
    1606:	19 f0       	breq	.+6      	; 0x160e <isspace+0x10>
    1608:	89 50       	subi	r24, 0x09	; 9
    160a:	85 50       	subi	r24, 0x05	; 5
    160c:	c8 f7       	brcc	.-14     	; 0x1600 <isspace+0x2>
    160e:	08 95       	ret

00001610 <strncasecmp_P>:
    1610:	fb 01       	movw	r30, r22
    1612:	dc 01       	movw	r26, r24
    1614:	41 50       	subi	r20, 0x01	; 1
    1616:	50 40       	sbci	r21, 0x00	; 0
    1618:	88 f0       	brcs	.+34     	; 0x163c <strncasecmp_P+0x2c>
    161a:	8d 91       	ld	r24, X+
    161c:	81 34       	cpi	r24, 0x41	; 65
    161e:	1c f0       	brlt	.+6      	; 0x1626 <strncasecmp_P+0x16>
    1620:	8b 35       	cpi	r24, 0x5B	; 91
    1622:	0c f4       	brge	.+2      	; 0x1626 <strncasecmp_P+0x16>
    1624:	80 5e       	subi	r24, 0xE0	; 224
    1626:	65 91       	lpm	r22, Z+
    1628:	61 34       	cpi	r22, 0x41	; 65
    162a:	1c f0       	brlt	.+6      	; 0x1632 <strncasecmp_P+0x22>
    162c:	6b 35       	cpi	r22, 0x5B	; 91
    162e:	0c f4       	brge	.+2      	; 0x1632 <strncasecmp_P+0x22>
    1630:	60 5e       	subi	r22, 0xE0	; 224
    1632:	86 1b       	sub	r24, r22
    1634:	61 11       	cpse	r22, r1
    1636:	71 f3       	breq	.-36     	; 0x1614 <strncasecmp_P+0x4>
    1638:	99 0b       	sbc	r25, r25
    163a:	08 95       	ret
    163c:	88 1b       	sub	r24, r24
    163e:	fc cf       	rjmp	.-8      	; 0x1638 <strncasecmp_P+0x28>

00001640 <__cmpsf2>:
    1640:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__fp_cmp>
    1644:	08 f4       	brcc	.+2      	; 0x1648 <__cmpsf2+0x8>
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	08 95       	ret

0000164a <__ctype_isfalse>:
    164a:	99 27       	eor	r25, r25
    164c:	88 27       	eor	r24, r24

0000164e <__ctype_istrue>:
    164e:	08 95       	ret

00001650 <__muluhisi3>:
    1650:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <__umulhisi3>
    1654:	a5 9f       	mul	r26, r21
    1656:	90 0d       	add	r25, r0
    1658:	b4 9f       	mul	r27, r20
    165a:	90 0d       	add	r25, r0
    165c:	a4 9f       	mul	r26, r20
    165e:	80 0d       	add	r24, r0
    1660:	91 1d       	adc	r25, r1
    1662:	11 24       	eor	r1, r1
    1664:	08 95       	ret

00001666 <__prologue_saves__>:
    1666:	2f 92       	push	r2
    1668:	3f 92       	push	r3
    166a:	4f 92       	push	r4
    166c:	5f 92       	push	r5
    166e:	6f 92       	push	r6
    1670:	7f 92       	push	r7
    1672:	8f 92       	push	r8
    1674:	9f 92       	push	r9
    1676:	af 92       	push	r10
    1678:	bf 92       	push	r11
    167a:	cf 92       	push	r12
    167c:	df 92       	push	r13
    167e:	ef 92       	push	r14
    1680:	ff 92       	push	r15
    1682:	0f 93       	push	r16
    1684:	1f 93       	push	r17
    1686:	cf 93       	push	r28
    1688:	df 93       	push	r29
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62
    168e:	ca 1b       	sub	r28, r26
    1690:	db 0b       	sbc	r29, r27
    1692:	0f b6       	in	r0, 0x3f	; 63
    1694:	f8 94       	cli
    1696:	de bf       	out	0x3e, r29	; 62
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	cd bf       	out	0x3d, r28	; 61
    169c:	09 94       	ijmp

0000169e <__epilogue_restores__>:
    169e:	2a 88       	ldd	r2, Y+18	; 0x12
    16a0:	39 88       	ldd	r3, Y+17	; 0x11
    16a2:	48 88       	ldd	r4, Y+16	; 0x10
    16a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    16a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    16a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    16aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    16ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    16ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    16b0:	b9 84       	ldd	r11, Y+9	; 0x09
    16b2:	c8 84       	ldd	r12, Y+8	; 0x08
    16b4:	df 80       	ldd	r13, Y+7	; 0x07
    16b6:	ee 80       	ldd	r14, Y+6	; 0x06
    16b8:	fd 80       	ldd	r15, Y+5	; 0x05
    16ba:	0c 81       	ldd	r16, Y+4	; 0x04
    16bc:	1b 81       	ldd	r17, Y+3	; 0x03
    16be:	aa 81       	ldd	r26, Y+2	; 0x02
    16c0:	b9 81       	ldd	r27, Y+1	; 0x01
    16c2:	ce 0f       	add	r28, r30
    16c4:	d1 1d       	adc	r29, r1
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	f8 94       	cli
    16ca:	de bf       	out	0x3e, r29	; 62
    16cc:	0f be       	out	0x3f, r0	; 63
    16ce:	cd bf       	out	0x3d, r28	; 61
    16d0:	ed 01       	movw	r28, r26
    16d2:	08 95       	ret

000016d4 <__umulhisi3>:
    16d4:	a2 9f       	mul	r26, r18
    16d6:	b0 01       	movw	r22, r0
    16d8:	b3 9f       	mul	r27, r19
    16da:	c0 01       	movw	r24, r0
    16dc:	a3 9f       	mul	r26, r19
    16de:	70 0d       	add	r23, r0
    16e0:	81 1d       	adc	r24, r1
    16e2:	11 24       	eor	r1, r1
    16e4:	91 1d       	adc	r25, r1
    16e6:	b2 9f       	mul	r27, r18
    16e8:	70 0d       	add	r23, r0
    16ea:	81 1d       	adc	r24, r1
    16ec:	11 24       	eor	r1, r1
    16ee:	91 1d       	adc	r25, r1
    16f0:	08 95       	ret

000016f2 <_exit>:
    16f2:	f8 94       	cli

000016f4 <__stop_program>:
    16f4:	ff cf       	rjmp	.-2      	; 0x16f4 <__stop_program>
